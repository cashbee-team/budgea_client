=begin
#Budgea API Documentation

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 2.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.19

=end

require 'date'

module BudgeaClient
  class ConnectionLog
    # ID of the log
    attr_accessor :id

    # ID of the user
    attr_accessor :id_user

    # ID of the connection
    attr_accessor :id_connection

    # ID of the connector
    attr_accessor :id_connector

    # ID of the related connection source
    attr_accessor :id_source

    # bcrypt hash of the login
    attr_accessor :login

    # MD5 hash of the exception backtrace
    attr_accessor :error_uid

    # Timestamp of log, when the synchronization has finished
    attr_accessor :timestamp

    # If fail, the date represents the next try to connect
    attr_accessor :next_try

    # If fail, contains the error code
    attr_accessor :error

    # If fail, error message received from connector
    attr_accessor :error_message

    # Status of user (1 = charged user)
    attr_accessor :statut

    # In case of bank connection, number of accounts
    attr_accessor :nb_accounts

    # Timestamp when the synchronization has started
    attr_accessor :start

    # Worker used to do synchronization
    attr_accessor :worker

    # Session folder uid
    attr_accessor :session_folder_id

    # Fields for connection in additionalInformationNeeded state with background option
    attr_accessor :fields

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'id_user' => :'id_user',
        :'id_connection' => :'id_connection',
        :'id_connector' => :'id_connector',
        :'id_source' => :'id_source',
        :'login' => :'login',
        :'error_uid' => :'error_uid',
        :'timestamp' => :'timestamp',
        :'next_try' => :'next_try',
        :'error' => :'error',
        :'error_message' => :'error_message',
        :'statut' => :'statut',
        :'nb_accounts' => :'nb_accounts',
        :'start' => :'start',
        :'worker' => :'worker',
        :'session_folder_id' => :'session_folder_id',
        :'fields' => :'fields'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'Integer',
        :'id_user' => :'Integer',
        :'id_connection' => :'Integer',
        :'id_connector' => :'Integer',
        :'id_source' => :'Integer',
        :'login' => :'String',
        :'error_uid' => :'String',
        :'timestamp' => :'DateTime',
        :'next_try' => :'DateTime',
        :'error' => :'String',
        :'error_message' => :'String',
        :'statut' => :'Integer',
        :'nb_accounts' => :'Integer',
        :'start' => :'DateTime',
        :'worker' => :'String',
        :'session_folder_id' => :'String',
        :'fields' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'id_user')
        self.id_user = attributes[:'id_user']
      end

      if attributes.has_key?(:'id_connection')
        self.id_connection = attributes[:'id_connection']
      end

      if attributes.has_key?(:'id_connector')
        self.id_connector = attributes[:'id_connector']
      end

      if attributes.has_key?(:'id_source')
        self.id_source = attributes[:'id_source']
      end

      if attributes.has_key?(:'login')
        self.login = attributes[:'login']
      end

      if attributes.has_key?(:'error_uid')
        self.error_uid = attributes[:'error_uid']
      end

      if attributes.has_key?(:'timestamp')
        self.timestamp = attributes[:'timestamp']
      end

      if attributes.has_key?(:'next_try')
        self.next_try = attributes[:'next_try']
      end

      if attributes.has_key?(:'error')
        self.error = attributes[:'error']
      end

      if attributes.has_key?(:'error_message')
        self.error_message = attributes[:'error_message']
      end

      if attributes.has_key?(:'statut')
        self.statut = attributes[:'statut']
      end

      if attributes.has_key?(:'nb_accounts')
        self.nb_accounts = attributes[:'nb_accounts']
      end

      if attributes.has_key?(:'start')
        self.start = attributes[:'start']
      end

      if attributes.has_key?(:'worker')
        self.worker = attributes[:'worker']
      end

      if attributes.has_key?(:'session_folder_id')
        self.session_folder_id = attributes[:'session_folder_id']
      end

      if attributes.has_key?(:'fields')
        self.fields = attributes[:'fields']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @id_connection.nil?
        invalid_properties.push('invalid value for "id_connection", id_connection cannot be nil.')
      end

      if @timestamp.nil?
        invalid_properties.push('invalid value for "timestamp", timestamp cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.nil?
      return false if @id_connection.nil?
      return false if @timestamp.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          id_user == o.id_user &&
          id_connection == o.id_connection &&
          id_connector == o.id_connector &&
          id_source == o.id_source &&
          login == o.login &&
          error_uid == o.error_uid &&
          timestamp == o.timestamp &&
          next_try == o.next_try &&
          error == o.error &&
          error_message == o.error_message &&
          statut == o.statut &&
          nb_accounts == o.nb_accounts &&
          start == o.start &&
          worker == o.worker &&
          session_folder_id == o.session_folder_id &&
          fields == o.fields
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, id_user, id_connection, id_connector, id_source, login, error_uid, timestamp, next_try, error, error_message, statut, nb_accounts, start, worker, session_folder_id, fields].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = BudgeaClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
