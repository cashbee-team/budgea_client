=begin
#Budgea API Documentation

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 2.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.1

=end

require 'uri'

module BudgeaClient
  class AdministrationApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # List clients
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand 
    # @return [InlineResponse20013]
    def clients_get(opts = {})
      data, _status_code, _headers = clients_get_with_http_info(opts)
      data
    end

    # List clients
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand 
    # @return [Array<(InlineResponse20013, Fixnum, Hash)>] InlineResponse20013 data, response status code and response headers
    def clients_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdministrationApi.clients_get ...'
      end
      # resource path
      local_var_path = '/clients'

      # query parameters
      query_params = {}
      query_params[:'expand'] = opts[:'expand'] if !opts[:'expand'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20013')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdministrationApi#clients_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a client
    # 
    # @param id_client 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand 
    # @return [Client]
    def clients_id_client_delete(id_client, opts = {})
      data, _status_code, _headers = clients_id_client_delete_with_http_info(id_client, opts)
      data
    end

    # Delete a client
    # 
    # @param id_client 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand 
    # @return [Array<(Client, Fixnum, Hash)>] Client data, response status code and response headers
    def clients_id_client_delete_with_http_info(id_client, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdministrationApi.clients_id_client_delete ...'
      end
      # verify the required parameter 'id_client' is set
      if @api_client.config.client_side_validation && id_client.nil?
        fail ArgumentError, "Missing the required parameter 'id_client' when calling AdministrationApi.clients_id_client_delete"
      end
      # resource path
      local_var_path = '/clients/{id_client}'.sub('{' + 'id_client' + '}', id_client.to_s)

      # query parameters
      query_params = {}
      query_params[:'expand'] = opts[:'expand'] if !opts[:'expand'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Client')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdministrationApi#clients_id_client_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get information about a client
    # If you use the manage_token or a configuration token, you will get also the client secret.<br><br>
    # @param id_client 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand 
    # @return [Client]
    def clients_id_client_get(id_client, opts = {})
      data, _status_code, _headers = clients_id_client_get_with_http_info(id_client, opts)
      data
    end

    # Get information about a client
    # If you use the manage_token or a configuration token, you will get also the client secret.&lt;br&gt;&lt;br&gt;
    # @param id_client 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand 
    # @return [Array<(Client, Fixnum, Hash)>] Client data, response status code and response headers
    def clients_id_client_get_with_http_info(id_client, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdministrationApi.clients_id_client_get ...'
      end
      # verify the required parameter 'id_client' is set
      if @api_client.config.client_side_validation && id_client.nil?
        fail ArgumentError, "Missing the required parameter 'id_client' when calling AdministrationApi.clients_id_client_get"
      end
      # resource path
      local_var_path = '/clients/{id_client}'.sub('{' + 'id_client' + '}', id_client.to_s)

      # query parameters
      query_params = {}
      query_params[:'expand'] = opts[:'expand'] if !opts[:'expand'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Client')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdministrationApi#clients_id_client_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete the client logo
    # 
    # @param id_client 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand 
    # @return [File]
    def clients_id_client_logo_delete(id_client, opts = {})
      data, _status_code, _headers = clients_id_client_logo_delete_with_http_info(id_client, opts)
      data
    end

    # Delete the client logo
    # 
    # @param id_client 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand 
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def clients_id_client_logo_delete_with_http_info(id_client, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdministrationApi.clients_id_client_logo_delete ...'
      end
      # verify the required parameter 'id_client' is set
      if @api_client.config.client_side_validation && id_client.nil?
        fail ArgumentError, "Missing the required parameter 'id_client' when calling AdministrationApi.clients_id_client_logo_delete"
      end
      # resource path
      local_var_path = '/clients/{id_client}/logo'.sub('{' + 'id_client' + '}', id_client.to_s)

      # query parameters
      query_params = {}
      query_params[:'expand'] = opts[:'expand'] if !opts[:'expand'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdministrationApi#clients_id_client_logo_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the client logo
    # 
    # @param id_client 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand 
    # @return [File]
    def clients_id_client_logo_post(id_client, opts = {})
      data, _status_code, _headers = clients_id_client_logo_post_with_http_info(id_client, opts)
      data
    end

    # Update the client logo
    # 
    # @param id_client 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand 
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def clients_id_client_logo_post_with_http_info(id_client, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdministrationApi.clients_id_client_logo_post ...'
      end
      # verify the required parameter 'id_client' is set
      if @api_client.config.client_side_validation && id_client.nil?
        fail ArgumentError, "Missing the required parameter 'id_client' when calling AdministrationApi.clients_id_client_logo_post"
      end
      # resource path
      local_var_path = '/clients/{id_client}/logo'.sub('{' + 'id_client' + '}', id_client.to_s)

      # query parameters
      query_params = {}
      query_params[:'expand'] = opts[:'expand'] if !opts[:'expand'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdministrationApi#clients_id_client_logo_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a client
    # 
    # @param id_client 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :generate_keys set a rsa key pair for the client, which make it possible to generate a jwt user token using this client. No effect if the client already has a set of keys(default: False)
    # @option opts [String] :name name of client
    # @option opts [BOOLEAN] :secret reset the secret
    # @option opts [Array<String>] :redirect_uris list of allowed redirect uris
    # @option opts [String] :primary_color hexadecimal code of the client primary color (e.g F45B9A)
    # @option opts [String] :secondary_color hexadecimal code of the client secondary color (e.g F45B9A)
    # @option opts [String] :description text to display as a default description
    # @option opts [String] :description_banks text to display as a description for banks
    # @option opts [String] :description_providers text to display as a description for providers
    # @option opts [BOOLEAN] :pro Wether the client should display the company manager page
    # @option opts [String] :config custom config about the client
    # @option opts [BOOLEAN] :update_config update the custom information about the client instead of replacing the existing one (default: True)
    # @option opts [String] :expand 
    # @return [Client]
    def clients_id_client_put(id_client, opts = {})
      data, _status_code, _headers = clients_id_client_put_with_http_info(id_client, opts)
      data
    end

    # Update a client
    # 
    # @param id_client 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :generate_keys set a rsa key pair for the client, which make it possible to generate a jwt user token using this client. No effect if the client already has a set of keys(default: False)
    # @option opts [String] :name name of client
    # @option opts [BOOLEAN] :secret reset the secret
    # @option opts [Array<String>] :redirect_uris list of allowed redirect uris
    # @option opts [String] :primary_color hexadecimal code of the client primary color (e.g F45B9A)
    # @option opts [String] :secondary_color hexadecimal code of the client secondary color (e.g F45B9A)
    # @option opts [String] :description text to display as a default description
    # @option opts [String] :description_banks text to display as a description for banks
    # @option opts [String] :description_providers text to display as a description for providers
    # @option opts [BOOLEAN] :pro Wether the client should display the company manager page
    # @option opts [String] :config custom config about the client
    # @option opts [BOOLEAN] :update_config update the custom information about the client instead of replacing the existing one (default: True)
    # @option opts [String] :expand 
    # @return [Array<(Client, Fixnum, Hash)>] Client data, response status code and response headers
    def clients_id_client_put_with_http_info(id_client, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdministrationApi.clients_id_client_put ...'
      end
      # verify the required parameter 'id_client' is set
      if @api_client.config.client_side_validation && id_client.nil?
        fail ArgumentError, "Missing the required parameter 'id_client' when calling AdministrationApi.clients_id_client_put"
      end
      # resource path
      local_var_path = '/clients/{id_client}'.sub('{' + 'id_client' + '}', id_client.to_s)

      # query parameters
      query_params = {}
      query_params[:'expand'] = opts[:'expand'] if !opts[:'expand'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params['generate_keys'] = opts[:'generate_keys'] if !opts[:'generate_keys'].nil?
      form_params['name'] = opts[:'name'] if !opts[:'name'].nil?
      form_params['secret'] = opts[:'secret'] if !opts[:'secret'].nil?
      form_params['redirect_uris'] = @api_client.build_collection_param(opts[:'redirect_uris'], :csv) if !opts[:'redirect_uris'].nil?
      form_params['primary_color'] = opts[:'primary_color'] if !opts[:'primary_color'].nil?
      form_params['secondary_color'] = opts[:'secondary_color'] if !opts[:'secondary_color'].nil?
      form_params['description'] = opts[:'description'] if !opts[:'description'].nil?
      form_params['description_banks'] = opts[:'description_banks'] if !opts[:'description_banks'].nil?
      form_params['description_providers'] = opts[:'description_providers'] if !opts[:'description_providers'].nil?
      form_params['pro'] = opts[:'pro'] if !opts[:'pro'].nil?
      form_params['config'] = opts[:'config'] if !opts[:'config'].nil?
      form_params['update_config'] = opts[:'update_config'] if !opts[:'update_config'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Client')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdministrationApi#clients_id_client_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a client
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :generate_keys if True, generate a rsa pair of keys so the client can be used to generate jwt user tokens (default: False)
    # @option opts [String] :name name of client
    # @option opts [Array<String>] :redirect_uris list of allowed redirect uris
    # @option opts [String] :config custom config about the client
    # @option opts [String] :expand 
    # @return [Client]
    def clients_post(opts = {})
      data, _status_code, _headers = clients_post_with_http_info(opts)
      data
    end

    # Create a client
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :generate_keys if True, generate a rsa pair of keys so the client can be used to generate jwt user tokens (default: False)
    # @option opts [String] :name name of client
    # @option opts [Array<String>] :redirect_uris list of allowed redirect uris
    # @option opts [String] :config custom config about the client
    # @option opts [String] :expand 
    # @return [Array<(Client, Fixnum, Hash)>] Client data, response status code and response headers
    def clients_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdministrationApi.clients_post ...'
      end
      # resource path
      local_var_path = '/clients'

      # query parameters
      query_params = {}
      query_params[:'expand'] = opts[:'expand'] if !opts[:'expand'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params['generate_keys'] = opts[:'generate_keys'] if !opts[:'generate_keys'].nil?
      form_params['name'] = opts[:'name'] if !opts[:'name'].nil?
      form_params['redirect_uris'] = @api_client.build_collection_param(opts[:'redirect_uris'], :csv) if !opts[:'redirect_uris'].nil?
      form_params['config'] = opts[:'config'] if !opts[:'config'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Client')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdministrationApi#clients_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get configuration of the API.
    # <br><br>
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search limit the results to keys matching the given value
    # @return [nil]
    def config_get(opts = {})
      config_get_with_http_info(opts)
      nil
    end

    # Get configuration of the API.
    # &lt;br&gt;&lt;br&gt;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search limit the results to keys matching the given value
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def config_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdministrationApi.config_get ...'
      end
      # resource path
      local_var_path = '/config'

      # query parameters
      query_params = {}
      query_params[:'search'] = opts[:'search'] if !opts[:'search'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdministrationApi#config_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get configuration change history of the API.
    # <br><br>
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search limit the results to keys matching the given value
    # @option opts [String] :type type of change done on the configuration
    # @option opts [Date] :min_date minimal date of the change
    # @option opts [Date] :max_date maximum date of the change
    # @option opts [String] :expand 
    # @return [InlineResponse20014]
    def config_logs_get(opts = {})
      data, _status_code, _headers = config_logs_get_with_http_info(opts)
      data
    end

    # Get configuration change history of the API.
    # &lt;br&gt;&lt;br&gt;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search limit the results to keys matching the given value
    # @option opts [String] :type type of change done on the configuration
    # @option opts [Date] :min_date minimal date of the change
    # @option opts [Date] :max_date maximum date of the change
    # @option opts [String] :expand 
    # @return [Array<(InlineResponse20014, Fixnum, Hash)>] InlineResponse20014 data, response status code and response headers
    def config_logs_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdministrationApi.config_logs_get ...'
      end
      # resource path
      local_var_path = '/config/logs'

      # query parameters
      query_params = {}
      query_params[:'search'] = opts[:'search'] if !opts[:'search'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'min_date'] = opts[:'min_date'] if !opts[:'min_date'].nil?
      query_params[:'max_date'] = opts[:'max_date'] if !opts[:'max_date'].nil?
      query_params[:'expand'] = opts[:'expand'] if !opts[:'expand'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20014')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdministrationApi#config_logs_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Set a configuration value on the API.
    # Request: { \"connection.disable_new\": \"0\", \"search\": \"connection.disable_new\" }<br><br>
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search limit the results to keys matching the given value
    # @return [Object]
    def config_post(opts = {})
      data, _status_code, _headers = config_post_with_http_info(opts)
      data
    end

    # Set a configuration value on the API.
    # Request: { \&quot;connection.disable_new\&quot;: \&quot;0\&quot;, \&quot;search\&quot;: \&quot;connection.disable_new\&quot; }&lt;br&gt;&lt;br&gt;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search limit the results to keys matching the given value
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def config_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdministrationApi.config_post ...'
      end
      # resource path
      local_var_path = '/config'

      # query parameters
      query_params = {}
      query_params[:'search'] = opts[:'search'] if !opts[:'search'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdministrationApi#config_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List clients
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand 
    # @return [InlineResponse20013]
    def merchants_get(opts = {})
      data, _status_code, _headers = merchants_get_with_http_info(opts)
      data
    end

    # List clients
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand 
    # @return [Array<(InlineResponse20013, Fixnum, Hash)>] InlineResponse20013 data, response status code and response headers
    def merchants_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdministrationApi.merchants_get ...'
      end
      # resource path
      local_var_path = '/merchants'

      # query parameters
      query_params = {}
      query_params[:'expand'] = opts[:'expand'] if !opts[:'expand'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20013')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdministrationApi#merchants_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete the client logo
    # 
    # @param id_client 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand 
    # @return [File]
    def merchants_id_client_logo_delete(id_client, opts = {})
      data, _status_code, _headers = merchants_id_client_logo_delete_with_http_info(id_client, opts)
      data
    end

    # Delete the client logo
    # 
    # @param id_client 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand 
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def merchants_id_client_logo_delete_with_http_info(id_client, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdministrationApi.merchants_id_client_logo_delete ...'
      end
      # verify the required parameter 'id_client' is set
      if @api_client.config.client_side_validation && id_client.nil?
        fail ArgumentError, "Missing the required parameter 'id_client' when calling AdministrationApi.merchants_id_client_logo_delete"
      end
      # resource path
      local_var_path = '/merchants/{id_client}/logo'.sub('{' + 'id_client' + '}', id_client.to_s)

      # query parameters
      query_params = {}
      query_params[:'expand'] = opts[:'expand'] if !opts[:'expand'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdministrationApi#merchants_id_client_logo_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the client logo
    # 
    # @param id_client 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand 
    # @return [File]
    def merchants_id_client_logo_post(id_client, opts = {})
      data, _status_code, _headers = merchants_id_client_logo_post_with_http_info(id_client, opts)
      data
    end

    # Update the client logo
    # 
    # @param id_client 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand 
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def merchants_id_client_logo_post_with_http_info(id_client, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdministrationApi.merchants_id_client_logo_post ...'
      end
      # verify the required parameter 'id_client' is set
      if @api_client.config.client_side_validation && id_client.nil?
        fail ArgumentError, "Missing the required parameter 'id_client' when calling AdministrationApi.merchants_id_client_logo_post"
      end
      # resource path
      local_var_path = '/merchants/{id_client}/logo'.sub('{' + 'id_client' + '}', id_client.to_s)

      # query parameters
      query_params = {}
      query_params[:'expand'] = opts[:'expand'] if !opts[:'expand'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdministrationApi#merchants_id_client_logo_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a merchant. Needs a user identified in bearer to be used
    # 
    # @param name name of merchant
    # @param redirect_uris list of allowed redirect uris
    # @param iban payments initiated by this merchant will be done to this IBAN
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand 
    # @return [Client]
    def merchants_post(name, redirect_uris, iban, opts = {})
      data, _status_code, _headers = merchants_post_with_http_info(name, redirect_uris, iban, opts)
      data
    end

    # Create a merchant. Needs a user identified in bearer to be used
    # 
    # @param name name of merchant
    # @param redirect_uris list of allowed redirect uris
    # @param iban payments initiated by this merchant will be done to this IBAN
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand 
    # @return [Array<(Client, Fixnum, Hash)>] Client data, response status code and response headers
    def merchants_post_with_http_info(name, redirect_uris, iban, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdministrationApi.merchants_post ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling AdministrationApi.merchants_post"
      end
      # verify the required parameter 'redirect_uris' is set
      if @api_client.config.client_side_validation && redirect_uris.nil?
        fail ArgumentError, "Missing the required parameter 'redirect_uris' when calling AdministrationApi.merchants_post"
      end
      # verify the required parameter 'iban' is set
      if @api_client.config.client_side_validation && iban.nil?
        fail ArgumentError, "Missing the required parameter 'iban' when calling AdministrationApi.merchants_post"
      end
      # resource path
      local_var_path = '/merchants'

      # query parameters
      query_params = {}
      query_params[:'expand'] = opts[:'expand'] if !opts[:'expand'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params['name'] = name
      form_params['redirect_uris'] = @api_client.build_collection_param(redirect_uris, :csv)
      form_params['iban'] = iban

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Client')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdministrationApi#merchants_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # get performances stats on this instance
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :period number on days on which stats on synchronization have to be done per worker (Default: 1)
    # @return [nil]
    def monitoring_get(opts = {})
      monitoring_get_with_http_info(opts)
      nil
    end

    # get performances stats on this instance
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :period number on days on which stats on synchronization have to be done per worker (Default: 1)
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def monitoring_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdministrationApi.monitoring_get ...'
      end
      # resource path
      local_var_path = '/monitoring'

      # query parameters
      query_params = {}
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdministrationApi#monitoring_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Test synchronization on a random connection.
    # It can be used to test receiving data on your webhooks.<br><br>
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def test_sync_post(opts = {})
      test_sync_post_with_http_info(opts)
      nil
    end

    # Test synchronization on a random connection.
    # It can be used to test receiving data on your webhooks.&lt;br&gt;&lt;br&gt;
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def test_sync_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdministrationApi.test_sync_post ...'
      end
      # resource path
      local_var_path = '/test/sync'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdministrationApi#test_sync_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Test synchronization on a random connection.
    # It can be used to test receiving data on your webhooks.<br><br>
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def test_webhooks_post(opts = {})
      test_webhooks_post_with_http_info(opts)
      nil
    end

    # Test synchronization on a random connection.
    # It can be used to test receiving data on your webhooks.&lt;br&gt;&lt;br&gt;
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def test_webhooks_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdministrationApi.test_webhooks_post ...'
      end
      # resource path
      local_var_path = '/test/webhooks'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdministrationApi#test_webhooks_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes all webhook authentication types
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand 
    # @return [AuthProvider]
    def webhooks_auth_delete(opts = {})
      data, _status_code, _headers = webhooks_auth_delete_with_http_info(opts)
      data
    end

    # Deletes all webhook authentication types
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand 
    # @return [Array<(AuthProvider, Fixnum, Hash)>] AuthProvider data, response status code and response headers
    def webhooks_auth_delete_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdministrationApi.webhooks_auth_delete ...'
      end
      # resource path
      local_var_path = '/webhooks/auth'

      # query parameters
      query_params = {}
      query_params[:'expand'] = opts[:'expand'] if !opts[:'expand'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AuthProvider')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdministrationApi#webhooks_auth_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get webhooks authentication types
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand 
    # @return [InlineResponse20041]
    def webhooks_auth_get(opts = {})
      data, _status_code, _headers = webhooks_auth_get_with_http_info(opts)
      data
    end

    # Get webhooks authentication types
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand 
    # @return [Array<(InlineResponse20041, Fixnum, Hash)>] InlineResponse20041 data, response status code and response headers
    def webhooks_auth_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdministrationApi.webhooks_auth_get ...'
      end
      # resource path
      local_var_path = '/webhooks/auth'

      # query parameters
      query_params = {}
      query_params[:'expand'] = opts[:'expand'] if !opts[:'expand'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20041')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdministrationApi#webhooks_auth_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes the webhook authentication type
    # Updates the deleted field with the date of the deletion<br><br>
    # @param id_auth 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand 
    # @return [AuthProvider]
    def webhooks_auth_id_auth_delete(id_auth, opts = {})
      data, _status_code, _headers = webhooks_auth_id_auth_delete_with_http_info(id_auth, opts)
      data
    end

    # Deletes the webhook authentication type
    # Updates the deleted field with the date of the deletion&lt;br&gt;&lt;br&gt;
    # @param id_auth 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand 
    # @return [Array<(AuthProvider, Fixnum, Hash)>] AuthProvider data, response status code and response headers
    def webhooks_auth_id_auth_delete_with_http_info(id_auth, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdministrationApi.webhooks_auth_id_auth_delete ...'
      end
      # verify the required parameter 'id_auth' is set
      if @api_client.config.client_side_validation && id_auth.nil?
        fail ArgumentError, "Missing the required parameter 'id_auth' when calling AdministrationApi.webhooks_auth_id_auth_delete"
      end
      # resource path
      local_var_path = '/webhooks/auth/{id_auth}'.sub('{' + 'id_auth' + '}', id_auth.to_s)

      # query parameters
      query_params = {}
      query_params[:'expand'] = opts[:'expand'] if !opts[:'expand'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AuthProvider')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdministrationApi#webhooks_auth_id_auth_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Updates the webhook authentication type
    # 
    # @param id_auth 
    # @param type The type of the authentication process (oauth, certificate, token, etc...)
    # @param name The name of the authentication process to differentiate
    # @param [Hash] opts the optional parameters
    # @option opts [String] :config The authentication process configuration. A dict containing either the certificate
    # @option opts [String] :expand 
    # @return [AuthProvider]
    def webhooks_auth_id_auth_post(id_auth, type, name, opts = {})
      data, _status_code, _headers = webhooks_auth_id_auth_post_with_http_info(id_auth, type, name, opts)
      data
    end

    # Updates the webhook authentication type
    # 
    # @param id_auth 
    # @param type The type of the authentication process (oauth, certificate, token, etc...)
    # @param name The name of the authentication process to differentiate
    # @param [Hash] opts the optional parameters
    # @option opts [String] :config The authentication process configuration. A dict containing either the certificate
    # @option opts [String] :expand 
    # @return [Array<(AuthProvider, Fixnum, Hash)>] AuthProvider data, response status code and response headers
    def webhooks_auth_id_auth_post_with_http_info(id_auth, type, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdministrationApi.webhooks_auth_id_auth_post ...'
      end
      # verify the required parameter 'id_auth' is set
      if @api_client.config.client_side_validation && id_auth.nil?
        fail ArgumentError, "Missing the required parameter 'id_auth' when calling AdministrationApi.webhooks_auth_id_auth_post"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling AdministrationApi.webhooks_auth_id_auth_post"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling AdministrationApi.webhooks_auth_id_auth_post"
      end
      # resource path
      local_var_path = '/webhooks/auth/{id_auth}'.sub('{' + 'id_auth' + '}', id_auth.to_s)

      # query parameters
      query_params = {}
      query_params[:'expand'] = opts[:'expand'] if !opts[:'expand'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params['type'] = type
      form_params['name'] = name
      form_params['config'] = opts[:'config'] if !opts[:'config'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AuthProvider')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdministrationApi#webhooks_auth_id_auth_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Updates the webhook authentication type
    # 
    # @param id_auth 
    # @param type The type of the authentication process (oauth, certificate, token, etc...)
    # @param name The name of the authentication process to differentiate
    # @param [Hash] opts the optional parameters
    # @option opts [String] :config The authentication process configuration. A dict containt either the certificate
    # @option opts [String] :expand 
    # @return [AuthProvider]
    def webhooks_auth_id_auth_put(id_auth, type, name, opts = {})
      data, _status_code, _headers = webhooks_auth_id_auth_put_with_http_info(id_auth, type, name, opts)
      data
    end

    # Updates the webhook authentication type
    # 
    # @param id_auth 
    # @param type The type of the authentication process (oauth, certificate, token, etc...)
    # @param name The name of the authentication process to differentiate
    # @param [Hash] opts the optional parameters
    # @option opts [String] :config The authentication process configuration. A dict containt either the certificate
    # @option opts [String] :expand 
    # @return [Array<(AuthProvider, Fixnum, Hash)>] AuthProvider data, response status code and response headers
    def webhooks_auth_id_auth_put_with_http_info(id_auth, type, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdministrationApi.webhooks_auth_id_auth_put ...'
      end
      # verify the required parameter 'id_auth' is set
      if @api_client.config.client_side_validation && id_auth.nil?
        fail ArgumentError, "Missing the required parameter 'id_auth' when calling AdministrationApi.webhooks_auth_id_auth_put"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling AdministrationApi.webhooks_auth_id_auth_put"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling AdministrationApi.webhooks_auth_id_auth_put"
      end
      # resource path
      local_var_path = '/webhooks/auth/{id_auth}'.sub('{' + 'id_auth' + '}', id_auth.to_s)

      # query parameters
      query_params = {}
      query_params[:'expand'] = opts[:'expand'] if !opts[:'expand'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params['type'] = type
      form_params['name'] = name
      form_params['config'] = opts[:'config'] if !opts[:'config'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AuthProvider')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdministrationApi#webhooks_auth_id_auth_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Adds a new webhook authentication type
    # 
    # @param type The type of the authentication process (oauth, certificate, token, etc...)
    # @param name The name of the authentication process to differentiate
    # @param [Hash] opts the optional parameters
    # @option opts [String] :config The authentication process configuration. A dict contains either the certificate
    # @option opts [String] :expand 
    # @return [AuthProvider]
    def webhooks_auth_post(type, name, opts = {})
      data, _status_code, _headers = webhooks_auth_post_with_http_info(type, name, opts)
      data
    end

    # Adds a new webhook authentication type
    # 
    # @param type The type of the authentication process (oauth, certificate, token, etc...)
    # @param name The name of the authentication process to differentiate
    # @param [Hash] opts the optional parameters
    # @option opts [String] :config The authentication process configuration. A dict contains either the certificate
    # @option opts [String] :expand 
    # @return [Array<(AuthProvider, Fixnum, Hash)>] AuthProvider data, response status code and response headers
    def webhooks_auth_post_with_http_info(type, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdministrationApi.webhooks_auth_post ...'
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling AdministrationApi.webhooks_auth_post"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling AdministrationApi.webhooks_auth_post"
      end
      # resource path
      local_var_path = '/webhooks/auth'

      # query parameters
      query_params = {}
      query_params[:'expand'] = opts[:'expand'] if !opts[:'expand'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params['type'] = type
      form_params['name'] = name
      form_params['config'] = opts[:'config'] if !opts[:'config'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AuthProvider')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdministrationApi#webhooks_auth_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes all webhooks
    # Updates the deleted field with the date of the deletion<br><br>
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand 
    # @return [Webhook]
    def webhooks_delete(opts = {})
      data, _status_code, _headers = webhooks_delete_with_http_info(opts)
      data
    end

    # Deletes all webhooks
    # Updates the deleted field with the date of the deletion&lt;br&gt;&lt;br&gt;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand 
    # @return [Array<(Webhook, Fixnum, Hash)>] Webhook data, response status code and response headers
    def webhooks_delete_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdministrationApi.webhooks_delete ...'
      end
      # resource path
      local_var_path = '/webhooks'

      # query parameters
      query_params = {}
      query_params[:'expand'] = opts[:'expand'] if !opts[:'expand'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Webhook')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdministrationApi#webhooks_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get webhooks
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand 
    # @return [InlineResponse20040]
    def webhooks_get(opts = {})
      data, _status_code, _headers = webhooks_get_with_http_info(opts)
      data
    end

    # Get webhooks
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand 
    # @return [Array<(InlineResponse20040, Fixnum, Hash)>] InlineResponse20040 data, response status code and response headers
    def webhooks_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdministrationApi.webhooks_get ...'
      end
      # resource path
      local_var_path = '/webhooks'

      # query parameters
      query_params = {}
      query_params[:'expand'] = opts[:'expand'] if !opts[:'expand'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20040')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdministrationApi#webhooks_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # delete all entries
    # 
    # @param id_webhook 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand 
    # @return [Webhook]
    def webhooks_id_webhook_add_to_data_delete(id_webhook, opts = {})
      data, _status_code, _headers = webhooks_id_webhook_add_to_data_delete_with_http_info(id_webhook, opts)
      data
    end

    # delete all entries
    # 
    # @param id_webhook 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand 
    # @return [Array<(Webhook, Fixnum, Hash)>] Webhook data, response status code and response headers
    def webhooks_id_webhook_add_to_data_delete_with_http_info(id_webhook, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdministrationApi.webhooks_id_webhook_add_to_data_delete ...'
      end
      # verify the required parameter 'id_webhook' is set
      if @api_client.config.client_side_validation && id_webhook.nil?
        fail ArgumentError, "Missing the required parameter 'id_webhook' when calling AdministrationApi.webhooks_id_webhook_add_to_data_delete"
      end
      # resource path
      local_var_path = '/webhooks/{id_webhook}/add_to_data'.sub('{' + 'id_webhook' + '}', id_webhook.to_s)

      # query parameters
      query_params = {}
      query_params[:'expand'] = opts[:'expand'] if !opts[:'expand'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Webhook')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdministrationApi#webhooks_id_webhook_add_to_data_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # retrieve the list of the value to add in webhooks when sending the requested webhook
    # 
    # @param id_webhook 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand 
    # @return [InlineResponse20040]
    def webhooks_id_webhook_add_to_data_get(id_webhook, opts = {})
      data, _status_code, _headers = webhooks_id_webhook_add_to_data_get_with_http_info(id_webhook, opts)
      data
    end

    # retrieve the list of the value to add in webhooks when sending the requested webhook
    # 
    # @param id_webhook 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand 
    # @return [Array<(InlineResponse20040, Fixnum, Hash)>] InlineResponse20040 data, response status code and response headers
    def webhooks_id_webhook_add_to_data_get_with_http_info(id_webhook, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdministrationApi.webhooks_id_webhook_add_to_data_get ...'
      end
      # verify the required parameter 'id_webhook' is set
      if @api_client.config.client_side_validation && id_webhook.nil?
        fail ArgumentError, "Missing the required parameter 'id_webhook' when calling AdministrationApi.webhooks_id_webhook_add_to_data_get"
      end
      # resource path
      local_var_path = '/webhooks/{id_webhook}/add_to_data'.sub('{' + 'id_webhook' + '}', id_webhook.to_s)

      # query parameters
      query_params = {}
      query_params[:'expand'] = opts[:'expand'] if !opts[:'expand'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20040')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdministrationApi#webhooks_id_webhook_add_to_data_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # delete the requested entry
    # 
    # @param id_webhook 
    # @param key 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand 
    # @return [Webhook]
    def webhooks_id_webhook_add_to_data_key_delete(id_webhook, key, opts = {})
      data, _status_code, _headers = webhooks_id_webhook_add_to_data_key_delete_with_http_info(id_webhook, key, opts)
      data
    end

    # delete the requested entry
    # 
    # @param id_webhook 
    # @param key 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand 
    # @return [Array<(Webhook, Fixnum, Hash)>] Webhook data, response status code and response headers
    def webhooks_id_webhook_add_to_data_key_delete_with_http_info(id_webhook, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdministrationApi.webhooks_id_webhook_add_to_data_key_delete ...'
      end
      # verify the required parameter 'id_webhook' is set
      if @api_client.config.client_side_validation && id_webhook.nil?
        fail ArgumentError, "Missing the required parameter 'id_webhook' when calling AdministrationApi.webhooks_id_webhook_add_to_data_key_delete"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling AdministrationApi.webhooks_id_webhook_add_to_data_key_delete"
      end
      # resource path
      local_var_path = '/webhooks/{id_webhook}/add_to_data/{key}'.sub('{' + 'id_webhook' + '}', id_webhook.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = {}
      query_params[:'expand'] = opts[:'expand'] if !opts[:'expand'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Webhook')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdministrationApi#webhooks_id_webhook_add_to_data_key_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # retrieve the value to add in the requested webhook for the requested name
    # 
    # @param id_webhook 
    # @param key 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand 
    # @return [Webhook]
    def webhooks_id_webhook_add_to_data_key_get(id_webhook, key, opts = {})
      data, _status_code, _headers = webhooks_id_webhook_add_to_data_key_get_with_http_info(id_webhook, key, opts)
      data
    end

    # retrieve the value to add in the requested webhook for the requested name
    # 
    # @param id_webhook 
    # @param key 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand 
    # @return [Array<(Webhook, Fixnum, Hash)>] Webhook data, response status code and response headers
    def webhooks_id_webhook_add_to_data_key_get_with_http_info(id_webhook, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdministrationApi.webhooks_id_webhook_add_to_data_key_get ...'
      end
      # verify the required parameter 'id_webhook' is set
      if @api_client.config.client_side_validation && id_webhook.nil?
        fail ArgumentError, "Missing the required parameter 'id_webhook' when calling AdministrationApi.webhooks_id_webhook_add_to_data_key_get"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling AdministrationApi.webhooks_id_webhook_add_to_data_key_get"
      end
      # resource path
      local_var_path = '/webhooks/{id_webhook}/add_to_data/{key}'.sub('{' + 'id_webhook' + '}', id_webhook.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = {}
      query_params[:'expand'] = opts[:'expand'] if !opts[:'expand'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Webhook')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdministrationApi#webhooks_id_webhook_add_to_data_key_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # upate the requested field to store in user config when calling the endpoint
    # For each parameter, a value will be added in the webhook data. Use the key to set the name of the field. The values that can be added are to be found in the user configuration.<br><br>
    # @param id_webhook 
    # @param key 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand 
    # @return [Webhook]
    def webhooks_id_webhook_add_to_data_key_post(id_webhook, key, opts = {})
      data, _status_code, _headers = webhooks_id_webhook_add_to_data_key_post_with_http_info(id_webhook, key, opts)
      data
    end

    # upate the requested field to store in user config when calling the endpoint
    # For each parameter, a value will be added in the webhook data. Use the key to set the name of the field. The values that can be added are to be found in the user configuration.&lt;br&gt;&lt;br&gt;
    # @param id_webhook 
    # @param key 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand 
    # @return [Array<(Webhook, Fixnum, Hash)>] Webhook data, response status code and response headers
    def webhooks_id_webhook_add_to_data_key_post_with_http_info(id_webhook, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdministrationApi.webhooks_id_webhook_add_to_data_key_post ...'
      end
      # verify the required parameter 'id_webhook' is set
      if @api_client.config.client_side_validation && id_webhook.nil?
        fail ArgumentError, "Missing the required parameter 'id_webhook' when calling AdministrationApi.webhooks_id_webhook_add_to_data_key_post"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling AdministrationApi.webhooks_id_webhook_add_to_data_key_post"
      end
      # resource path
      local_var_path = '/webhooks/{id_webhook}/add_to_data/{key}'.sub('{' + 'id_webhook' + '}', id_webhook.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = {}
      query_params[:'expand'] = opts[:'expand'] if !opts[:'expand'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Webhook')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdministrationApi#webhooks_id_webhook_add_to_data_key_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Setup a field to store in user config when calling the endpoint
    # For each parameter, a value will be added in the webhook data. Use the key to set the name of the field. The values that can be added are to be found in the user configuration.<br><br>
    # @param id_webhook 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand 
    # @return [Webhook]
    def webhooks_id_webhook_add_to_data_post(id_webhook, opts = {})
      data, _status_code, _headers = webhooks_id_webhook_add_to_data_post_with_http_info(id_webhook, opts)
      data
    end

    # Setup a field to store in user config when calling the endpoint
    # For each parameter, a value will be added in the webhook data. Use the key to set the name of the field. The values that can be added are to be found in the user configuration.&lt;br&gt;&lt;br&gt;
    # @param id_webhook 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand 
    # @return [Array<(Webhook, Fixnum, Hash)>] Webhook data, response status code and response headers
    def webhooks_id_webhook_add_to_data_post_with_http_info(id_webhook, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdministrationApi.webhooks_id_webhook_add_to_data_post ...'
      end
      # verify the required parameter 'id_webhook' is set
      if @api_client.config.client_side_validation && id_webhook.nil?
        fail ArgumentError, "Missing the required parameter 'id_webhook' when calling AdministrationApi.webhooks_id_webhook_add_to_data_post"
      end
      # resource path
      local_var_path = '/webhooks/{id_webhook}/add_to_data'.sub('{' + 'id_webhook' + '}', id_webhook.to_s)

      # query parameters
      query_params = {}
      query_params[:'expand'] = opts[:'expand'] if !opts[:'expand'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Webhook')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdministrationApi#webhooks_id_webhook_add_to_data_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes a webhook
    # Updates the deleted field with the date of the deletion<br><br>
    # @param id_webhook 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand 
    # @return [Webhook]
    def webhooks_id_webhook_delete(id_webhook, opts = {})
      data, _status_code, _headers = webhooks_id_webhook_delete_with_http_info(id_webhook, opts)
      data
    end

    # Deletes a webhook
    # Updates the deleted field with the date of the deletion&lt;br&gt;&lt;br&gt;
    # @param id_webhook 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand 
    # @return [Array<(Webhook, Fixnum, Hash)>] Webhook data, response status code and response headers
    def webhooks_id_webhook_delete_with_http_info(id_webhook, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdministrationApi.webhooks_id_webhook_delete ...'
      end
      # verify the required parameter 'id_webhook' is set
      if @api_client.config.client_side_validation && id_webhook.nil?
        fail ArgumentError, "Missing the required parameter 'id_webhook' when calling AdministrationApi.webhooks_id_webhook_delete"
      end
      # resource path
      local_var_path = '/webhooks/{id_webhook}'.sub('{' + 'id_webhook' + '}', id_webhook.to_s)

      # query parameters
      query_params = {}
      query_params[:'expand'] = opts[:'expand'] if !opts[:'expand'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Webhook')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdministrationApi#webhooks_id_webhook_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get webhooks logs.
    # Get logs of the webhooks.<br><br>By default, it selects logs for the last month. You can use \"min_date\" and \"max_date\" to change boundary dates.<br><br>
    # @param id_webhook 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :id_user limit number of results to this user
    # @option opts [Integer] :limit limit number of results
    # @option opts [Integer] :offset offset of first result
    # @option opts [Date] :min_date minimal (inclusive) date
    # @option opts [Date] :max_date maximum (inclusive) date
    # @option opts [String] :expand 
    # @return [InlineResponse20042]
    def webhooks_id_webhook_logs_get(id_webhook, opts = {})
      data, _status_code, _headers = webhooks_id_webhook_logs_get_with_http_info(id_webhook, opts)
      data
    end

    # Get webhooks logs.
    # Get logs of the webhooks.&lt;br&gt;&lt;br&gt;By default, it selects logs for the last month. You can use \&quot;min_date\&quot; and \&quot;max_date\&quot; to change boundary dates.&lt;br&gt;&lt;br&gt;
    # @param id_webhook 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :id_user limit number of results to this user
    # @option opts [Integer] :limit limit number of results
    # @option opts [Integer] :offset offset of first result
    # @option opts [Date] :min_date minimal (inclusive) date
    # @option opts [Date] :max_date maximum (inclusive) date
    # @option opts [String] :expand 
    # @return [Array<(InlineResponse20042, Fixnum, Hash)>] InlineResponse20042 data, response status code and response headers
    def webhooks_id_webhook_logs_get_with_http_info(id_webhook, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdministrationApi.webhooks_id_webhook_logs_get ...'
      end
      # verify the required parameter 'id_webhook' is set
      if @api_client.config.client_side_validation && id_webhook.nil?
        fail ArgumentError, "Missing the required parameter 'id_webhook' when calling AdministrationApi.webhooks_id_webhook_logs_get"
      end
      # resource path
      local_var_path = '/webhooks/{id_webhook}/logs'.sub('{' + 'id_webhook' + '}', id_webhook.to_s)

      # query parameters
      query_params = {}
      query_params[:'id_user'] = opts[:'id_user'] if !opts[:'id_user'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'min_date'] = opts[:'min_date'] if !opts[:'min_date'].nil?
      query_params[:'max_date'] = opts[:'max_date'] if !opts[:'max_date'].nil?
      query_params[:'expand'] = opts[:'expand'] if !opts[:'expand'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20042')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdministrationApi#webhooks_id_webhook_logs_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Updates a webhook
    # 
    # @param id_webhook 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :deleted a date to delete the webhook or &#39;null&#39; to enable it
    # @option opts [Integer] :id_user The user ID to associate with the webhook
    # @option opts [Integer] :id_service The service ID to associate with the webhook
    # @option opts [Integer] :id_auth The webhook authentication process to use
    # @option opts [Float] :url The webhook callback url
    # @option opts [String] :event The webhook event
    # @option opts [String] :expand 
    # @return [Webhook]
    def webhooks_id_webhook_post(id_webhook, opts = {})
      data, _status_code, _headers = webhooks_id_webhook_post_with_http_info(id_webhook, opts)
      data
    end

    # Updates a webhook
    # 
    # @param id_webhook 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :deleted a date to delete the webhook or &#39;null&#39; to enable it
    # @option opts [Integer] :id_user The user ID to associate with the webhook
    # @option opts [Integer] :id_service The service ID to associate with the webhook
    # @option opts [Integer] :id_auth The webhook authentication process to use
    # @option opts [Float] :url The webhook callback url
    # @option opts [String] :event The webhook event
    # @option opts [String] :expand 
    # @return [Array<(Webhook, Fixnum, Hash)>] Webhook data, response status code and response headers
    def webhooks_id_webhook_post_with_http_info(id_webhook, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdministrationApi.webhooks_id_webhook_post ...'
      end
      # verify the required parameter 'id_webhook' is set
      if @api_client.config.client_side_validation && id_webhook.nil?
        fail ArgumentError, "Missing the required parameter 'id_webhook' when calling AdministrationApi.webhooks_id_webhook_post"
      end
      # resource path
      local_var_path = '/webhooks/{id_webhook}'.sub('{' + 'id_webhook' + '}', id_webhook.to_s)

      # query parameters
      query_params = {}
      query_params[:'expand'] = opts[:'expand'] if !opts[:'expand'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params['deleted'] = opts[:'deleted'] if !opts[:'deleted'].nil?
      form_params['id_user'] = opts[:'id_user'] if !opts[:'id_user'].nil?
      form_params['id_service'] = opts[:'id_service'] if !opts[:'id_service'].nil?
      form_params['id_auth'] = opts[:'id_auth'] if !opts[:'id_auth'].nil?
      form_params['url'] = opts[:'url'] if !opts[:'url'].nil?
      form_params['event'] = opts[:'event'] if !opts[:'event'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Webhook')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdministrationApi#webhooks_id_webhook_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Updates a webhook
    # 
    # @param id_webhook 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :deleted a date to delete the webhook or &#39;null&#39; to enable it
    # @option opts [Integer] :id_user The user ID to associate with the webhook
    # @option opts [Integer] :id_service The service ID to associate with the webhook
    # @option opts [Integer] :id_auth The webhook authentication process to use
    # @option opts [Float] :url The webhook callback url
    # @option opts [String] :event The webhook event
    # @option opts [String] :expand 
    # @return [Webhook]
    def webhooks_id_webhook_put(id_webhook, opts = {})
      data, _status_code, _headers = webhooks_id_webhook_put_with_http_info(id_webhook, opts)
      data
    end

    # Updates a webhook
    # 
    # @param id_webhook 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :deleted a date to delete the webhook or &#39;null&#39; to enable it
    # @option opts [Integer] :id_user The user ID to associate with the webhook
    # @option opts [Integer] :id_service The service ID to associate with the webhook
    # @option opts [Integer] :id_auth The webhook authentication process to use
    # @option opts [Float] :url The webhook callback url
    # @option opts [String] :event The webhook event
    # @option opts [String] :expand 
    # @return [Array<(Webhook, Fixnum, Hash)>] Webhook data, response status code and response headers
    def webhooks_id_webhook_put_with_http_info(id_webhook, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdministrationApi.webhooks_id_webhook_put ...'
      end
      # verify the required parameter 'id_webhook' is set
      if @api_client.config.client_side_validation && id_webhook.nil?
        fail ArgumentError, "Missing the required parameter 'id_webhook' when calling AdministrationApi.webhooks_id_webhook_put"
      end
      # resource path
      local_var_path = '/webhooks/{id_webhook}'.sub('{' + 'id_webhook' + '}', id_webhook.to_s)

      # query parameters
      query_params = {}
      query_params[:'expand'] = opts[:'expand'] if !opts[:'expand'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params['deleted'] = opts[:'deleted'] if !opts[:'deleted'].nil?
      form_params['id_user'] = opts[:'id_user'] if !opts[:'id_user'].nil?
      form_params['id_service'] = opts[:'id_service'] if !opts[:'id_service'].nil?
      form_params['id_auth'] = opts[:'id_auth'] if !opts[:'id_auth'].nil?
      form_params['url'] = opts[:'url'] if !opts[:'url'].nil?
      form_params['event'] = opts[:'event'] if !opts[:'event'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Webhook')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdministrationApi#webhooks_id_webhook_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Adds a new webhook
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :id_user The user ID to associate with the webhook
    # @option opts [Integer] :id_service The service ID to associate with the webhook
    # @option opts [String] :id_auth The webhook authentication process to use (its ID or its name)
    # @option opts [Float] :url The webhook callback url
    # @option opts [String] :event The webhook event
    # @option opts [String] :params The webhook parameters as an object with three keys: type, key and value
    # @option opts [String] :expand 
    # @return [Webhook]
    def webhooks_post(opts = {})
      data, _status_code, _headers = webhooks_post_with_http_info(opts)
      data
    end

    # Adds a new webhook
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :id_user The user ID to associate with the webhook
    # @option opts [Integer] :id_service The service ID to associate with the webhook
    # @option opts [String] :id_auth The webhook authentication process to use (its ID or its name)
    # @option opts [Float] :url The webhook callback url
    # @option opts [String] :event The webhook event
    # @option opts [String] :params The webhook parameters as an object with three keys: type, key and value
    # @option opts [String] :expand 
    # @return [Array<(Webhook, Fixnum, Hash)>] Webhook data, response status code and response headers
    def webhooks_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdministrationApi.webhooks_post ...'
      end
      # resource path
      local_var_path = '/webhooks'

      # query parameters
      query_params = {}
      query_params[:'expand'] = opts[:'expand'] if !opts[:'expand'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params['id_user'] = opts[:'id_user'] if !opts[:'id_user'].nil?
      form_params['id_service'] = opts[:'id_service'] if !opts[:'id_service'].nil?
      form_params['id_auth'] = opts[:'id_auth'] if !opts[:'id_auth'].nil?
      form_params['url'] = opts[:'url'] if !opts[:'url'].nil?
      form_params['event'] = opts[:'event'] if !opts[:'event'].nil?
      form_params['params'] = opts[:'params'] if !opts[:'params'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Webhook')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdministrationApi#webhooks_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
