# frozen_string_literal: true

require 'spec_helper'
require 'json'

# Unit tests for BudgeaClient::AuthenticationApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'AuthenticationApi' do
  before do
    # run before each test
    @instance = BudgeaClient::AuthenticationApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of AuthenticationApi' do
    it 'should create an instance of AuthenticationApi' do
      expect(@instance).to be_instance_of(BudgeaClient::AuthenticationApi)
    end
  end

  # unit tests for auth_init_post
  # Create a new anonymous user
  # This endpoint creates a new temporary token related to a new anonymous user.&lt;br&gt;&lt;br&gt;It will expire 30 minutes after.&lt;br&gt;&lt;br&gt;Note: if you supply client_id and client_secret, or if you call this endpoint with the manage_token, the token will be permanent.&lt;br&gt;&lt;br&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :client_id ID of the client
  # @option opts [String] :client_secret secret of the client
  # @return [InlineResponse2002]
  describe 'auth_init_post test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for auth_token_access_post
  # Transform a temporary code to a access_token
  # In order to register a new user with the OAuth 2 process, the client has to call this endpoint to request a granted access_token with the received temporary code.&lt;br&gt;&lt;br&gt;
  # @param client_id ID of the client
  # @param client_secret secret of the client
  # @param code user&#39;s temporary code
  # @param [Hash] opts the optional parameters
  # @option opts [String] :grant_type default is \&quot;authorization_code\&quot;
  # @option opts [String] :redirect_uri redirect uri used by user
  # @return [InlineResponse2005]
  describe 'auth_token_access_post test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for auth_token_code_get
  # Generate a user temporary token
  # This endpoint generates a new temporary token for the user.&lt;br&gt;&lt;br&gt;In case the access_token is used by a trusted device, and you want to let another one (for example a web browser) access to user resources, use this service to create a token which will expire in 30 minutes.&lt;br&gt;&lt;br&gt;
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse2006]
  describe 'auth_token_code_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for auth_token_delete
  # Remove user access
  # This endpoint removes the token in use.&lt;br&gt;&lt;br&gt;
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'auth_token_delete test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for hash_delete
  # Delete the user&#39;s connections
  # deletes all connections of the user given his hash&lt;br&gt;&lt;br&gt;
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'hash_delete test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_delete
  # Delete the user
  # This endpoint deletes the user.&lt;br&gt;&lt;br&gt;
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [User]
  describe 'users_id_user_delete test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_get
  # Get a user
  # 
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [User]
  describe 'users_id_user_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_token_post
  # Create a token
  # Create an access_token for this user and get it.&lt;br&gt;&lt;br&gt;
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param application application name
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'users_id_user_token_post test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
