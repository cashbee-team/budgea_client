# frozen_string_literal: true

require 'spec_helper'
require 'json'

# Unit tests for BudgeaClient::BanksApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'BanksApi' do
  before do
    # run before each test
    @instance = BudgeaClient::BanksApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of BanksApi' do
    it 'should create an instance of BanksApi' do
      expect(@instance).to be_instance_of(BudgeaClient::BanksApi)
    end
  end

  # unit tests for account_types_get
  # Get account types
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [InlineResponse200]
  describe 'account_types_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for account_types_id_account_type_get
  # Get an account type
  # 
  # @param id_account_type 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [AccountType]
  describe 'account_types_id_account_type_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for banks_categories_id_category_delete
  # Delete the supplied category
  # 
  # @param id_category 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [BankCategory]
  describe 'banks_categories_id_category_delete test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for banks_categories_id_category_post
  # Edit a bank categories
  # Edit the name for the supplied category.&lt;br&gt;&lt;br&gt;
  # @param id_category 
  # @param name new name for the supplied category
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [BankCategory]
  describe 'banks_categories_id_category_post test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for banks_categories_post
  # Create bank categories
  # It requires the name of the category to be created&lt;br&gt;&lt;br&gt;
  # @param name name of the category to be created
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [BankCategory]
  describe 'banks_categories_post test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for banks_get
  # Get list of connectors
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [InlineResponse2007]
  describe 'banks_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for banks_id_bank_connections_get
  # Get a subset of id_connection with the largest diversity of account
  # By default, it selects a set of 3 connections.&lt;br&gt;&lt;br&gt;
  # @param id_bank 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :range the length of the connection subset
  # @option opts [Integer] :type to target a specific account type which will be
  # @option opts [String] :expand 
  # @return [InlineResponse2008]
  describe 'banks_id_bank_connections_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for banks_id_bank_logos_get
  # Get all links to the files associated with this bank.
  # This endpoint returns all links to files associated with this bank.&lt;br&gt;&lt;br&gt;
  # @param id_bank 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [InlineResponse2009]
  describe 'banks_id_bank_logos_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for banks_id_bank_logos_main_get
  # Get all links to the files associated with this bank.
  # This endpoint returns all links to files associated with this bank.&lt;br&gt;&lt;br&gt;
  # @param id_bank 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [InlineResponse2009]
  describe 'banks_id_bank_logos_main_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for banks_id_bank_logos_thumbnail_get
  # Get all links to the files associated with this bank.
  # This endpoint returns all links to files associated with this bank.&lt;br&gt;&lt;br&gt;
  # @param id_bank 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [InlineResponse2009]
  describe 'banks_id_bank_logos_thumbnail_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for categories_get
  # Get all categories
  # Ressource to get all existing categories&lt;br&gt;&lt;br&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [InlineResponse20010]
  describe 'categories_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for categorize_post
  # categorize transactions without storing them
  # It requires an array of transaction dictionaries. Any fields of transactions that are not required will be kept in the response. The response contains the list of transactions with two more fields: id_category and state (it indicates how the transaction has been categorized)&lt;br&gt;&lt;br&gt;
  # @param wording label of the transaction
  # @param value vallue of the transaction
  # @param type type of the transaction (default: unknown)
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'categorize_post test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for connections_get
  # Get connections without a user
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [InlineResponse2008]
  describe 'connections_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for connectors_get
  # Get list of connectors
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [InlineResponse20012]
  describe 'connectors_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for connectors_id_bank_logos_get
  # Get all links to the files associated with this bank.
  # This endpoint returns all links to files associated with this bank.&lt;br&gt;&lt;br&gt;
  # @param id_bank 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [InlineResponse2009]
  describe 'connectors_id_bank_logos_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for connectors_id_bank_logos_id_logo_delete
  # Delete a single Logo object.
  # 
  # @param id_bank 
  # @param id_logo 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [ConnectorLogo]
  describe 'connectors_id_bank_logos_id_logo_delete test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for connectors_id_bank_logos_id_logo_put
  # Create or Update a Bank Logo.
  # This endpoint creates or update a bank logo. This logo is a mapping between a file (/file route) and a bank (/banks route) or a provider (/providers route).&lt;br&gt;&lt;br&gt;Form params: - id_file (integer): The id of the file to link with that bank.&lt;br&gt;&lt;br&gt;
  # @param id_bank 
  # @param id_logo 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [ConnectorLogo]
  describe 'connectors_id_bank_logos_id_logo_put test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for connectors_id_bank_logos_main_get
  # Get all links to the files associated with this bank.
  # This endpoint returns all links to files associated with this bank.&lt;br&gt;&lt;br&gt;
  # @param id_bank 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [InlineResponse2009]
  describe 'connectors_id_bank_logos_main_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for connectors_id_bank_logos_post
  # Create a Bank Logo
  # This endpoint creates a bank logo. You can either pass a file to as a parameter to insert and link it with the bank or pass an id_file to link a bank with an existing file. Will fail if the file is already linked with that bank.&lt;br&gt;&lt;br&gt;Form params: - id_file (integer): The id of the file to link with that bank. - img (string): Path to the image to link with that bank.&lt;br&gt;&lt;br&gt;
  # @param id_bank 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [ConnectorLogo]
  describe 'connectors_id_bank_logos_post test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for connectors_id_bank_logos_put
  # Create or Update a Bank Logo
  # This endpoint creates or update a bank logo. This logo is a mapping between a file (/file route) and a bank (/banks route) or a provider (/providers route).&lt;br&gt;&lt;br&gt;Form params: - id_file (integer): The id of the file to link with that bank.&lt;br&gt;&lt;br&gt;
  # @param id_bank 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [ConnectorLogo]
  describe 'connectors_id_bank_logos_put test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for connectors_id_bank_logos_thumbnail_get
  # Get all links to the files associated with this bank.
  # This endpoint returns all links to files associated with this bank.&lt;br&gt;&lt;br&gt;
  # @param id_bank 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [InlineResponse2009]
  describe 'connectors_id_bank_logos_thumbnail_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for connectors_id_connector_put
  # Edit the provided bank
  # &lt;br&gt;&lt;br&gt;
  # @param id_connector 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :id_categories one or several comma separated categories to map to the given bank (or null to map no category)
  # @option opts [BOOLEAN] :hidden to enable  or disable connector (bank or provider)
  # @option opts [Integer] :sync_frequency Allows you to overload global sync_frequency param
  # @option opts [String] :expand 
  # @return [Bank]
  describe 'connectors_id_connector_put test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for connectors_post
  # Request a new connector
  # Send a request to add a new connector&lt;br&gt;&lt;br&gt;
  # @param name Name of the bank or provider
  # @param login Users login
  # @param password Users password
  # @param [Hash] opts the optional parameters
  # @option opts [String] :api Name of the API
  # @option opts [String] :url Url of the bank
  # @option opts [String] :email Email of the user
  # @option opts [String] :types Type of connector, eg. banks or providers
  # @option opts [String] :comment Optionnal comment
  # @option opts [BOOLEAN] :sendmail if set, send an email to user
  # @option opts [String] :expand 
  # @return [Bank]
  describe 'connectors_post test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for invoicing_get
  # Get number of accounts, connections and users synced.
  # Get number of accounts, connections and users synced between two dates for the given period.&lt;br&gt;&lt;br&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [Date] :min_date minimal date
  # @option opts [Date] :max_date maximum date
  # @option opts [String] :period period to group logs
  # @option opts [String] :all get full ids list instead of numbers
  # @return [nil]
  describe 'invoicing_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for logs_get
  # Get connection logs
  # Get logs about connections.&lt;br&gt;&lt;br&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit limit number of results
  # @option opts [Integer] :offset offset of first result
  # @option opts [Date] :min_date minimal date
  # @option opts [Date] :max_date maximum date
  # @option opts [Integer] :state state of user
  # @option opts [String] :period period to group logs
  # @option opts [Integer] :id_user ID of a user
  # @option opts [Integer] :id_connection ID of a connection
  # @option opts [Integer] :id_bank ID of a bank
  # @option opts [BOOLEAN] :charged consider only logs for charged banks
  # @option opts [String] :expand 
  # @return [InlineResponse20015]
  describe 'logs_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for providers_get
  # Get list of connectors
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [InlineResponse2007]
  describe 'providers_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for providers_id_bank_logos_get
  # Get all links to the files associated with this bank.
  # This endpoint returns all links to files associated with this bank.&lt;br&gt;&lt;br&gt;
  # @param id_bank 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [InlineResponse2009]
  describe 'providers_id_bank_logos_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for providers_id_bank_logos_main_get
  # Get all links to the files associated with this bank.
  # This endpoint returns all links to files associated with this bank.&lt;br&gt;&lt;br&gt;
  # @param id_bank 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [InlineResponse2009]
  describe 'providers_id_bank_logos_main_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for providers_id_bank_logos_thumbnail_get
  # Get all links to the files associated with this bank.
  # This endpoint returns all links to files associated with this bank.&lt;br&gt;&lt;br&gt;
  # @param id_bank 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [InlineResponse2009]
  describe 'providers_id_bank_logos_thumbnail_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_account_types_get
  # Get account types
  # 
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [InlineResponse200]
  describe 'users_id_user_account_types_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_account_types_id_account_type_get
  # Get an account type
  # 
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_account_type 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [AccountType]
  describe 'users_id_user_account_types_id_account_type_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_accounts_delete
  # Delete all accounts
  # 
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [Account]
  describe 'users_id_user_accounts_delete test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_accounts_get
  # Get accounts list.
  # 
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [InlineResponse20018]
  describe 'users_id_user_accounts_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_accounts_id_account_categories_get
  # Get the category
  # Ressource to get categories for the user&#39;s transactions&lt;br&gt;&lt;br&gt;
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_account 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'users_id_user_accounts_id_account_categories_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_accounts_id_account_delete
  # Delete an account.
  # It deletes a specific account. If this is the last synced account of a connection, it will be removed too.&lt;br&gt;&lt;br&gt;
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_account 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [Account]
  describe 'users_id_user_accounts_id_account_delete test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_accounts_id_account_delta_get
  # Get deltas of accounts
  # Get account delta between sums of transactions and difference of account balance for the given period.&lt;br&gt;&lt;br&gt;
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_account 
  # @param [Hash] opts the optional parameters
  # @option opts [Date] :min_date minimal date
  # @option opts [Date] :max_date maximum date
  # @option opts [String] :period period to group logs
  # @return [nil]
  describe 'users_id_user_accounts_id_account_delta_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_accounts_id_account_logs_get
  # Get accounts logs.
  # Get logs of account.&lt;br&gt;&lt;br&gt;By default, it selects logs for the last month. You can use \&quot;min_date\&quot; and \&quot;max_date\&quot; to change boundary dates.&lt;br&gt;&lt;br&gt;
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_account 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit limit number of results
  # @option opts [Integer] :offset offset of first result
  # @option opts [Date] :min_date minimal (inclusive) date
  # @option opts [Date] :max_date maximum (inclusive) date
  # @option opts [String] :expand 
  # @return [InlineResponse20021]
  describe 'users_id_user_accounts_id_account_logs_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_accounts_id_account_put
  # Update an account
  # It updates a specific account&lt;br&gt;&lt;br&gt;
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_account 
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :display If the account is displayed
  # @option opts [String] :name Label of the account
  # @option opts [Float] :balance Balance of the account
  # @option opts [BOOLEAN] :disabled If the account is disabled (not synchronized)
  # @option opts [String] :iban IBAN of the account
  # @option opts [BOOLEAN] :bookmarked If the account is bookmarked
  # @option opts [String] :expand 
  # @return [Account]
  describe 'users_id_user_accounts_id_account_put test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_accounts_id_account_transactions_delete
  # Delete transactions
  # 
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_account 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [Transaction]
  describe 'users_id_user_accounts_id_account_transactions_delete test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_accounts_id_account_transactions_get
  # Get transactions
  # Get list of transactions.&lt;br&gt;&lt;br&gt;By default, it selects transactions for the last month. You can use \&quot;min_date\&quot; and \&quot;max_date\&quot; to change boundary dates.&lt;br&gt;&lt;br&gt;
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_account 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit limit number of results
  # @option opts [Integer] :offset offset of first result
  # @option opts [Date] :min_date minimal (inclusive) date
  # @option opts [Date] :max_date maximum (inclusive) date
  # @option opts [BOOLEAN] :income filter on income or expenditures
  # @option opts [BOOLEAN] :deleted display only deleted transactions
  # @option opts [BOOLEAN] :all display all transactions, including deleted ones
  # @option opts [DateTime] :last_update get only transactions updated after the specified datetime
  # @option opts [String] :wording filter transactions containing the given string
  # @option opts [Float] :min_value minimal (inclusive) value
  # @option opts [Float] :max_value maximum (inclusive) value
  # @option opts [String] :search search in labels, dates, values and categories
  # @option opts [String] :value \&quot;XX|-XX\&quot; or \&quot;±XX\&quot;
  # @option opts [String] :expand 
  # @return [InlineResponse20025]
  describe 'users_id_user_accounts_id_account_transactions_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_accounts_id_account_transactions_id_transaction_informations_delete
  # Delete all arbitrary key-value pairs of a transaction
  # 
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_account 
  # @param id_transaction 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [TransactionInformation]
  describe 'users_id_user_accounts_id_account_transactions_id_transaction_informations_delete test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_accounts_id_account_transactions_id_transaction_informations_get
  # List all arbitrary key-value pairs on a transaction
  # 
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_account 
  # @param id_transaction 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [InlineResponse20027]
  describe 'users_id_user_accounts_id_account_transactions_id_transaction_informations_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_accounts_id_account_transactions_id_transaction_informations_id_information_delete
  # Delete a particular key-value pair on a transaction.
  # 
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_account 
  # @param id_transaction 
  # @param id_information 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [TransactionInformation]
  describe 'users_id_user_accounts_id_account_transactions_id_transaction_informations_id_information_delete test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_accounts_id_account_transactions_id_transaction_informations_id_information_get
  # Get a particular arbitrary key-value pair on a transaction
  # 
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_account 
  # @param id_transaction 
  # @param id_information 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [TransactionInformation]
  describe 'users_id_user_accounts_id_account_transactions_id_transaction_informations_id_information_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_accounts_id_account_transactions_id_transaction_informations_put
  # Add or edit transaction arbitrary key-value pairs
  # 
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_account 
  # @param id_transaction 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [TransactionInformation]
  describe 'users_id_user_accounts_id_account_transactions_id_transaction_informations_put test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_accounts_id_account_transactions_id_transaction_put
  # Edit a transaction meta-data
  # 
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_account 
  # @param id_transaction 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :wording user rewording of the transaction
  # @option opts [Date] :application_date change application date of the transaction
  # @option opts [Integer] :id_category ID of the associated category
  # @option opts [String] :comment change comment
  # @option opts [BOOLEAN] :active if false, transaction isn&#39;t considered in analyzisis endpoints (like /balances)
  # @option opts [String] :expand 
  # @return [Transaction]
  describe 'users_id_user_accounts_id_account_transactions_id_transaction_put test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_accounts_id_account_transactions_post
  # Create transactions
  # Create transactions for the supplied account or the account whose id is given with form parameters. It requires an array of transaction dictionaries.&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_account 
  # @param original_wording label of the transaction
  # @param value vallue of the transaction
  # @param date date of the transaction
  # @param [Hash] opts the optional parameters
  # @option opts [String] :type type of the transaction (default: unknown)
  # @option opts [String] :state nature of the transaction (default: new)
  # @option opts [Date] :rdate realisation date of the transaction (default: value of date)
  # @option opts [BOOLEAN] :coming 1 if the transaction has already been debited (default: 0)
  # @option opts [BOOLEAN] :active 1 if the transaction should be taken into account by pfm services (default: 1)
  # @option opts [DateTime] :date_scraped date on which the transaction has been found for the first time. YYYY-MM-DD HH:MM:SS(default: now)
  # @option opts [Integer] :id_account2 account of the transaction. If not supplied, it has to be given in the route
  # @option opts [String] :expand 
  # @return [Transaction]
  describe 'users_id_user_accounts_id_account_transactions_post test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_accounts_id_account_transactionsclusters_get
  # Get clustered transactions
  # 
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_account 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [InlineResponse20028]
  describe 'users_id_user_accounts_id_account_transactionsclusters_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_accounts_id_account_transactionsclusters_id_transactionscluster_delete
  # Delete a clustered transaction
  # 
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_account 
  # @param id_transactionscluster 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [TransactionsCluster]
  describe 'users_id_user_accounts_id_account_transactionsclusters_id_transactionscluster_delete test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_accounts_id_account_transactionsclusters_id_transactionscluster_put
  # Edit a clustered transaction
  # Form params : - next_date (date): Date of transaction - mean_amount (decimal): Mean Amount - wording (string): name of transaction - id_account (id): related account - id_category (id): related category - enabled (bool): is enabled&lt;br&gt;&lt;br&gt;
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_account 
  # @param id_transactionscluster 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [TransactionsCluster]
  describe 'users_id_user_accounts_id_account_transactionsclusters_id_transactionscluster_put test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_accounts_id_account_transactionsclusters_post
  # Create clustered transaction
  # Form params : - next_date (date) required: Date of transaction - mean_amount (decimal) required: Mean Amount - wording (string) required: name of transaction - id_account (id) required: related account&lt;br&gt;&lt;br&gt;
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_account 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [TransactionsCluster]
  describe 'users_id_user_accounts_id_account_transactionsclusters_post test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_accounts_post
  # Create an account
  # This endpoint creates an account not related to a connection.&lt;br&gt;&lt;br&gt;
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param name name of account
  # @param balance balance of account
  # @param [Hash] opts the optional parameters
  # @option opts [String] :number number of account
  # @option opts [String] :iban IBAN of account
  # @option opts [String] :id_currency the currency of the account (default: &#39;EUR&#39;)
  # @option opts [String] :expand 
  # @return [Account]
  describe 'users_id_user_accounts_post test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_alerts_get
  # Get alerts
  # 
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [InlineResponse20029]
  describe 'users_id_user_alerts_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_categories_full_get
  # Get the category
  # Ressource to get categories&lt;br&gt;&lt;br&gt;
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [InlineResponse20030]
  describe 'users_id_user_categories_full_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_categories_get
  # Get the category
  # Ressource to get categories for the user&#39;s transactions&lt;br&gt;&lt;br&gt;
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'users_id_user_categories_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_connections_delete
  # Delete all connections
  # 
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [Connection]
  describe 'users_id_user_connections_delete test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_connections_get
  # Get connections
  # 
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [InlineResponse2008]
  describe 'users_id_user_connections_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_connections_id_connection_accounts_delete
  # Delete all accounts
  # 
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_connection 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [Account]
  describe 'users_id_user_connections_id_connection_accounts_delete test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_connections_id_connection_accounts_get
  # Get accounts list.
  # 
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_connection 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [InlineResponse20018]
  describe 'users_id_user_connections_id_connection_accounts_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_connections_id_connection_accounts_id_account_categories_get
  # Get the category
  # Ressource to get categories for the user&#39;s transactions&lt;br&gt;&lt;br&gt;
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_connection 
  # @param id_account 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'users_id_user_connections_id_connection_accounts_id_account_categories_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_connections_id_connection_accounts_id_account_delete
  # Delete an account.
  # It deletes a specific account. If this is the last synced account of a connection, it will be removed too.&lt;br&gt;&lt;br&gt;
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_connection 
  # @param id_account 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [Account]
  describe 'users_id_user_connections_id_connection_accounts_id_account_delete test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_connections_id_connection_accounts_id_account_delta_get
  # Get deltas of accounts
  # Get account delta between sums of transactions and difference of account balance for the given period.&lt;br&gt;&lt;br&gt;
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_connection 
  # @param id_account 
  # @param [Hash] opts the optional parameters
  # @option opts [Date] :min_date minimal date
  # @option opts [Date] :max_date maximum date
  # @option opts [String] :period period to group logs
  # @return [nil]
  describe 'users_id_user_connections_id_connection_accounts_id_account_delta_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_connections_id_connection_accounts_id_account_logs_get
  # Get accounts logs.
  # Get logs of account.&lt;br&gt;&lt;br&gt;By default, it selects logs for the last month. You can use \&quot;min_date\&quot; and \&quot;max_date\&quot; to change boundary dates.&lt;br&gt;&lt;br&gt;
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_connection 
  # @param id_account 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit limit number of results
  # @option opts [Integer] :offset offset of first result
  # @option opts [Date] :min_date minimal (inclusive) date
  # @option opts [Date] :max_date maximum (inclusive) date
  # @option opts [String] :expand 
  # @return [InlineResponse20021]
  describe 'users_id_user_connections_id_connection_accounts_id_account_logs_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_connections_id_connection_accounts_id_account_put
  # Update an account
  # It updates a specific account&lt;br&gt;&lt;br&gt;
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_connection 
  # @param id_account 
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :display If the account is displayed
  # @option opts [String] :name Label of the account
  # @option opts [Float] :balance Balance of the account
  # @option opts [BOOLEAN] :disabled If the account is disabled (not synchronized)
  # @option opts [String] :iban IBAN of the account
  # @option opts [BOOLEAN] :bookmarked If the account is bookmarked
  # @option opts [String] :expand 
  # @return [Account]
  describe 'users_id_user_connections_id_connection_accounts_id_account_put test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_connections_id_connection_accounts_id_account_transactions_delete
  # Delete transactions
  # 
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_connection 
  # @param id_account 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [Transaction]
  describe 'users_id_user_connections_id_connection_accounts_id_account_transactions_delete test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_connections_id_connection_accounts_id_account_transactions_get
  # Get transactions
  # Get list of transactions.&lt;br&gt;&lt;br&gt;By default, it selects transactions for the last month. You can use \&quot;min_date\&quot; and \&quot;max_date\&quot; to change boundary dates.&lt;br&gt;&lt;br&gt;
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_connection 
  # @param id_account 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit limit number of results
  # @option opts [Integer] :offset offset of first result
  # @option opts [Date] :min_date minimal (inclusive) date
  # @option opts [Date] :max_date maximum (inclusive) date
  # @option opts [BOOLEAN] :income filter on income or expenditures
  # @option opts [BOOLEAN] :deleted display only deleted transactions
  # @option opts [BOOLEAN] :all display all transactions, including deleted ones
  # @option opts [DateTime] :last_update get only transactions updated after the specified datetime
  # @option opts [String] :wording filter transactions containing the given string
  # @option opts [Float] :min_value minimal (inclusive) value
  # @option opts [Float] :max_value maximum (inclusive) value
  # @option opts [String] :search search in labels, dates, values and categories
  # @option opts [String] :value \&quot;XX|-XX\&quot; or \&quot;±XX\&quot;
  # @option opts [String] :expand 
  # @return [InlineResponse20025]
  describe 'users_id_user_connections_id_connection_accounts_id_account_transactions_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_informations_delete
  # Delete all arbitrary key-value pairs of a transaction
  # 
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_connection 
  # @param id_account 
  # @param id_transaction 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [TransactionInformation]
  describe 'users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_informations_delete test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_informations_get
  # List all arbitrary key-value pairs on a transaction
  # 
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_connection 
  # @param id_account 
  # @param id_transaction 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [InlineResponse20027]
  describe 'users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_informations_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_informations_id_information_delete
  # Delete a particular key-value pair on a transaction.
  # 
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_connection 
  # @param id_account 
  # @param id_transaction 
  # @param id_information 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [TransactionInformation]
  describe 'users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_informations_id_information_delete test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_informations_id_information_get
  # Get a particular arbitrary key-value pair on a transaction
  # 
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_connection 
  # @param id_account 
  # @param id_transaction 
  # @param id_information 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [TransactionInformation]
  describe 'users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_informations_id_information_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_informations_put
  # Add or edit transaction arbitrary key-value pairs
  # 
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_connection 
  # @param id_account 
  # @param id_transaction 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [TransactionInformation]
  describe 'users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_informations_put test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_put
  # Edit a transaction meta-data
  # 
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_connection 
  # @param id_account 
  # @param id_transaction 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :wording user rewording of the transaction
  # @option opts [Date] :application_date change application date of the transaction
  # @option opts [Integer] :id_category ID of the associated category
  # @option opts [String] :comment change comment
  # @option opts [BOOLEAN] :active if false, transaction isn&#39;t considered in analyzisis endpoints (like /balances)
  # @option opts [String] :expand 
  # @return [Transaction]
  describe 'users_id_user_connections_id_connection_accounts_id_account_transactions_id_transaction_put test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_connections_id_connection_accounts_id_account_transactions_post
  # Create transactions
  # Create transactions for the supplied account or the account whose id is given with form parameters. It requires an array of transaction dictionaries.&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_connection 
  # @param id_account 
  # @param original_wording label of the transaction
  # @param value vallue of the transaction
  # @param date date of the transaction
  # @param [Hash] opts the optional parameters
  # @option opts [String] :type type of the transaction (default: unknown)
  # @option opts [String] :state nature of the transaction (default: new)
  # @option opts [Date] :rdate realisation date of the transaction (default: value of date)
  # @option opts [BOOLEAN] :coming 1 if the transaction has already been debited (default: 0)
  # @option opts [BOOLEAN] :active 1 if the transaction should be taken into account by pfm services (default: 1)
  # @option opts [DateTime] :date_scraped date on which the transaction has been found for the first time. YYYY-MM-DD HH:MM:SS(default: now)
  # @option opts [Integer] :id_account2 account of the transaction. If not supplied, it has to be given in the route
  # @option opts [String] :expand 
  # @return [Transaction]
  describe 'users_id_user_connections_id_connection_accounts_id_account_transactions_post test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_get
  # Get clustered transactions
  # 
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_connection 
  # @param id_account 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [InlineResponse20028]
  describe 'users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactionscluster_delete
  # Delete a clustered transaction
  # 
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_connection 
  # @param id_account 
  # @param id_transactionscluster 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [TransactionsCluster]
  describe 'users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactionscluster_delete test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactionscluster_put
  # Edit a clustered transaction
  # Form params : - next_date (date): Date of transaction - mean_amount (decimal): Mean Amount - wording (string): name of transaction - id_account (id): related account - id_category (id): related category - enabled (bool): is enabled&lt;br&gt;&lt;br&gt;
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_connection 
  # @param id_account 
  # @param id_transactionscluster 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [TransactionsCluster]
  describe 'users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_id_transactionscluster_put test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_post
  # Create clustered transaction
  # Form params : - next_date (date) required: Date of transaction - mean_amount (decimal) required: Mean Amount - wording (string) required: name of transaction - id_account (id) required: related account&lt;br&gt;&lt;br&gt;
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_connection 
  # @param id_account 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [TransactionsCluster]
  describe 'users_id_user_connections_id_connection_accounts_id_account_transactionsclusters_post test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_connections_id_connection_accounts_post
  # Create an account
  # This endpoint creates an account not related to a connection.&lt;br&gt;&lt;br&gt;
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_connection 
  # @param name name of account
  # @param balance balance of account
  # @param [Hash] opts the optional parameters
  # @option opts [String] :number number of account
  # @option opts [String] :iban IBAN of account
  # @option opts [String] :id_currency the currency of the account (default: &#39;EUR&#39;)
  # @option opts [String] :expand 
  # @return [Account]
  describe 'users_id_user_connections_id_connection_accounts_post test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_connections_id_connection_delete
  # Delete a connection.
  # This endpoint deletes a connection and all related accounts and transactions.&lt;br&gt;&lt;br&gt;
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_connection 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [Connection]
  describe 'users_id_user_connections_id_connection_delete test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_connections_id_connection_informations_get
  # Get connection additionnal informations
  # &lt;br&gt;&lt;br&gt;
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_connection 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [InlineResponse2008]
  describe 'users_id_user_connections_id_connection_informations_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_connections_id_connection_logs_get
  # Get connection logs
  # Get logs about connections.&lt;br&gt;&lt;br&gt;
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_connection 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit limit number of results
  # @option opts [Integer] :offset offset of first result
  # @option opts [Date] :min_date minimal date
  # @option opts [Date] :max_date maximum date
  # @option opts [Integer] :state state of user
  # @option opts [String] :period period to group logs
  # @option opts [Integer] :id_user2 ID of a user
  # @option opts [Integer] :id_connection2 ID of a connection
  # @option opts [Integer] :id_bank ID of a bank
  # @option opts [BOOLEAN] :charged consider only logs for charged banks
  # @option opts [String] :expand 
  # @return [InlineResponse20015]
  describe 'users_id_user_connections_id_connection_logs_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_connections_id_connection_post
  # Update a connection.
  # Give new parameters to change on the configuration of this connection (for example \&quot;password\&quot;).&lt;br&gt;&lt;br&gt;It tests connection to website, and if it fails, a 400 response is given with the error code \&quot;wrongpass\&quot; or \&quot;websiteUnavailable\&quot;.&lt;br&gt;&lt;br&gt;You can also supply meta-parameters on connection, like &#39;active&#39; or &#39;expire&#39;.&lt;br&gt;&lt;br&gt;
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_connection 
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :active Set if the connection synchronisation is active
  # @option opts [DateTime] :expire Set expiration of the connection to this date
  # @option opts [String] :login Set login to this new login
  # @option opts [String] :password Set password to this new password
  # @option opts [String] :expand 
  # @return [Connection]
  describe 'users_id_user_connections_id_connection_post test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_connections_id_connection_put
  # Force synchronisation of a connection.
  # We suggest to pass parameter expand&#x3D;accounts[transactions] to get all *new* and *updated* transactions.&lt;br&gt;&lt;br&gt;Query params: - expand (string): fields to expand - last_update (dateTime): if supplied, get transactions inserted since this date&lt;br&gt;&lt;br&gt;
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_connection 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [Connection]
  describe 'users_id_user_connections_id_connection_put test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_connections_id_connection_transactions_delete
  # Delete transactions
  # 
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_connection 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [Transaction]
  describe 'users_id_user_connections_id_connection_transactions_delete test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_connections_id_connection_transactions_get
  # Get transactions
  # Get list of transactions.&lt;br&gt;&lt;br&gt;By default, it selects transactions for the last month. You can use \&quot;min_date\&quot; and \&quot;max_date\&quot; to change boundary dates.&lt;br&gt;&lt;br&gt;
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_connection 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit limit number of results
  # @option opts [Integer] :offset offset of first result
  # @option opts [Date] :min_date minimal (inclusive) date
  # @option opts [Date] :max_date maximum (inclusive) date
  # @option opts [BOOLEAN] :income filter on income or expenditures
  # @option opts [BOOLEAN] :deleted display only deleted transactions
  # @option opts [BOOLEAN] :all display all transactions, including deleted ones
  # @option opts [DateTime] :last_update get only transactions updated after the specified datetime
  # @option opts [String] :wording filter transactions containing the given string
  # @option opts [Float] :min_value minimal (inclusive) value
  # @option opts [Float] :max_value maximum (inclusive) value
  # @option opts [String] :search search in labels, dates, values and categories
  # @option opts [String] :value \&quot;XX|-XX\&quot; or \&quot;±XX\&quot;
  # @option opts [String] :expand 
  # @return [InlineResponse20025]
  describe 'users_id_user_connections_id_connection_transactions_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_connections_id_connection_transactions_id_transaction_informations_delete
  # Delete all arbitrary key-value pairs of a transaction
  # 
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_connection 
  # @param id_transaction 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [TransactionInformation]
  describe 'users_id_user_connections_id_connection_transactions_id_transaction_informations_delete test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_connections_id_connection_transactions_id_transaction_informations_get
  # List all arbitrary key-value pairs on a transaction
  # 
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_connection 
  # @param id_transaction 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [InlineResponse20027]
  describe 'users_id_user_connections_id_connection_transactions_id_transaction_informations_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_connections_id_connection_transactions_id_transaction_informations_id_information_delete
  # Delete a particular key-value pair on a transaction.
  # 
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_connection 
  # @param id_transaction 
  # @param id_information 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [TransactionInformation]
  describe 'users_id_user_connections_id_connection_transactions_id_transaction_informations_id_information_delete test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_connections_id_connection_transactions_id_transaction_informations_id_information_get
  # Get a particular arbitrary key-value pair on a transaction
  # 
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_connection 
  # @param id_transaction 
  # @param id_information 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [TransactionInformation]
  describe 'users_id_user_connections_id_connection_transactions_id_transaction_informations_id_information_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_connections_id_connection_transactions_id_transaction_informations_put
  # Add or edit transaction arbitrary key-value pairs
  # 
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_connection 
  # @param id_transaction 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [TransactionInformation]
  describe 'users_id_user_connections_id_connection_transactions_id_transaction_informations_put test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_connections_id_connection_transactions_id_transaction_put
  # Edit a transaction meta-data
  # 
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_connection 
  # @param id_transaction 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :wording user rewording of the transaction
  # @option opts [Date] :application_date change application date of the transaction
  # @option opts [Integer] :id_category ID of the associated category
  # @option opts [String] :comment change comment
  # @option opts [BOOLEAN] :active if false, transaction isn&#39;t considered in analyzisis endpoints (like /balances)
  # @option opts [String] :expand 
  # @return [Transaction]
  describe 'users_id_user_connections_id_connection_transactions_id_transaction_put test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_connections_id_connection_transactions_post
  # Create transactions
  # Create transactions for the supplied account or the account whose id is given with form parameters. It requires an array of transaction dictionaries.&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_connection 
  # @param original_wording label of the transaction
  # @param value vallue of the transaction
  # @param date date of the transaction
  # @param [Hash] opts the optional parameters
  # @option opts [String] :type type of the transaction (default: unknown)
  # @option opts [String] :state nature of the transaction (default: new)
  # @option opts [Date] :rdate realisation date of the transaction (default: value of date)
  # @option opts [BOOLEAN] :coming 1 if the transaction has already been debited (default: 0)
  # @option opts [BOOLEAN] :active 1 if the transaction should be taken into account by pfm services (default: 1)
  # @option opts [DateTime] :date_scraped date on which the transaction has been found for the first time. YYYY-MM-DD HH:MM:SS(default: now)
  # @option opts [Integer] :id_account account of the transaction. If not supplied, it has to be given in the route
  # @option opts [String] :expand 
  # @return [Transaction]
  describe 'users_id_user_connections_id_connection_transactions_post test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_connections_id_connection_transactionsclusters_get
  # Get clustered transactions
  # 
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_connection 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [InlineResponse20028]
  describe 'users_id_user_connections_id_connection_transactionsclusters_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_connections_id_connection_transactionsclusters_id_transactionscluster_delete
  # Delete a clustered transaction
  # 
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_connection 
  # @param id_transactionscluster 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [TransactionsCluster]
  describe 'users_id_user_connections_id_connection_transactionsclusters_id_transactionscluster_delete test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_connections_id_connection_transactionsclusters_id_transactionscluster_put
  # Edit a clustered transaction
  # Form params : - next_date (date): Date of transaction - mean_amount (decimal): Mean Amount - wording (string): name of transaction - id_account (id): related account - id_category (id): related category - enabled (bool): is enabled&lt;br&gt;&lt;br&gt;
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_connection 
  # @param id_transactionscluster 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [TransactionsCluster]
  describe 'users_id_user_connections_id_connection_transactionsclusters_id_transactionscluster_put test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_connections_id_connection_transactionsclusters_post
  # Create clustered transaction
  # Form params : - next_date (date) required: Date of transaction - mean_amount (decimal) required: Mean Amount - wording (string) required: name of transaction - id_account (id) required: related account&lt;br&gt;&lt;br&gt;
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_connection 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [TransactionsCluster]
  describe 'users_id_user_connections_id_connection_transactionsclusters_post test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_connections_post
  # Add a new connection.
  # Create a new connection to a given bank or provider. You have to give all needed parameters (use /banks/ID/fields or /providers/ID/fields to get them).&lt;br&gt;&lt;br&gt;
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :id_bank ID of the bank
  # @option opts [Integer] :id_provider ID of the provider
  # @option opts [String] :expand 
  # @return [Connection]
  describe 'users_id_user_connections_post test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_forecast_get
  # Get forecast
  # 
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'users_id_user_forecast_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_logs_get
  # Get connection logs
  # Get logs about connections.&lt;br&gt;&lt;br&gt;
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit limit number of results
  # @option opts [Integer] :offset offset of first result
  # @option opts [Date] :min_date minimal date
  # @option opts [Date] :max_date maximum date
  # @option opts [Integer] :state state of user
  # @option opts [String] :period period to group logs
  # @option opts [Integer] :id_user2 ID of a user
  # @option opts [Integer] :id_connection ID of a connection
  # @option opts [Integer] :id_bank ID of a bank
  # @option opts [BOOLEAN] :charged consider only logs for charged banks
  # @option opts [String] :expand 
  # @return [InlineResponse20015]
  describe 'users_id_user_logs_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_transactions_delete
  # Delete transactions
  # 
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [Transaction]
  describe 'users_id_user_transactions_delete test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_transactions_get
  # Get transactions
  # Get list of transactions.&lt;br&gt;&lt;br&gt;By default, it selects transactions for the last month. You can use \&quot;min_date\&quot; and \&quot;max_date\&quot; to change boundary dates.&lt;br&gt;&lt;br&gt;
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit limit number of results
  # @option opts [Integer] :offset offset of first result
  # @option opts [Date] :min_date minimal (inclusive) date
  # @option opts [Date] :max_date maximum (inclusive) date
  # @option opts [BOOLEAN] :income filter on income or expenditures
  # @option opts [BOOLEAN] :deleted display only deleted transactions
  # @option opts [BOOLEAN] :all display all transactions, including deleted ones
  # @option opts [DateTime] :last_update get only transactions updated after the specified datetime
  # @option opts [String] :wording filter transactions containing the given string
  # @option opts [Float] :min_value minimal (inclusive) value
  # @option opts [Float] :max_value maximum (inclusive) value
  # @option opts [String] :search search in labels, dates, values and categories
  # @option opts [String] :value \&quot;XX|-XX\&quot; or \&quot;±XX\&quot;
  # @option opts [String] :expand 
  # @return [InlineResponse20025]
  describe 'users_id_user_transactions_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_transactions_id_transaction_informations_delete
  # Delete all arbitrary key-value pairs of a transaction
  # 
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_transaction 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [TransactionInformation]
  describe 'users_id_user_transactions_id_transaction_informations_delete test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_transactions_id_transaction_informations_get
  # List all arbitrary key-value pairs on a transaction
  # 
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_transaction 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [InlineResponse20027]
  describe 'users_id_user_transactions_id_transaction_informations_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_transactions_id_transaction_informations_id_information_delete
  # Delete a particular key-value pair on a transaction.
  # 
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_transaction 
  # @param id_information 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [TransactionInformation]
  describe 'users_id_user_transactions_id_transaction_informations_id_information_delete test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_transactions_id_transaction_informations_id_information_get
  # Get a particular arbitrary key-value pair on a transaction
  # 
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_transaction 
  # @param id_information 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [TransactionInformation]
  describe 'users_id_user_transactions_id_transaction_informations_id_information_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_transactions_id_transaction_informations_put
  # Add or edit transaction arbitrary key-value pairs
  # 
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_transaction 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [TransactionInformation]
  describe 'users_id_user_transactions_id_transaction_informations_put test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_transactions_id_transaction_put
  # Edit a transaction meta-data
  # 
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_transaction 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :wording user rewording of the transaction
  # @option opts [Date] :application_date change application date of the transaction
  # @option opts [Integer] :id_category ID of the associated category
  # @option opts [String] :comment change comment
  # @option opts [BOOLEAN] :active if false, transaction isn&#39;t considered in analyzisis endpoints (like /balances)
  # @option opts [String] :expand 
  # @return [Transaction]
  describe 'users_id_user_transactions_id_transaction_put test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_transactions_post
  # Create transactions
  # Create transactions for the supplied account or the account whose id is given with form parameters. It requires an array of transaction dictionaries.&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param original_wording label of the transaction
  # @param value vallue of the transaction
  # @param date date of the transaction
  # @param [Hash] opts the optional parameters
  # @option opts [String] :type type of the transaction (default: unknown)
  # @option opts [String] :state nature of the transaction (default: new)
  # @option opts [Date] :rdate realisation date of the transaction (default: value of date)
  # @option opts [BOOLEAN] :coming 1 if the transaction has already been debited (default: 0)
  # @option opts [BOOLEAN] :active 1 if the transaction should be taken into account by pfm services (default: 1)
  # @option opts [DateTime] :date_scraped date on which the transaction has been found for the first time. YYYY-MM-DD HH:MM:SS(default: now)
  # @option opts [Integer] :id_account account of the transaction. If not supplied, it has to be given in the route
  # @option opts [String] :expand 
  # @return [Transaction]
  describe 'users_id_user_transactions_post test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_transactionsclusters_get
  # Get clustered transactions
  # 
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [InlineResponse20028]
  describe 'users_id_user_transactionsclusters_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_transactionsclusters_id_transactionscluster_delete
  # Delete a clustered transaction
  # 
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_transactionscluster 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [TransactionsCluster]
  describe 'users_id_user_transactionsclusters_id_transactionscluster_delete test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_transactionsclusters_id_transactionscluster_put
  # Edit a clustered transaction
  # Form params : - next_date (date): Date of transaction - mean_amount (decimal): Mean Amount - wording (string): name of transaction - id_account (id): related account - id_category (id): related category - enabled (bool): is enabled&lt;br&gt;&lt;br&gt;
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_transactionscluster 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [TransactionsCluster]
  describe 'users_id_user_transactionsclusters_id_transactionscluster_put test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_transactionsclusters_post
  # Create clustered transaction
  # Form params : - next_date (date) required: Date of transaction - mean_amount (decimal) required: Mean Amount - wording (string) required: name of transaction - id_account (id) required: related account&lt;br&gt;&lt;br&gt;
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [TransactionsCluster]
  describe 'users_id_user_transactionsclusters_post test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
