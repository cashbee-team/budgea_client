# frozen_string_literal: true

require 'spec_helper'
require 'json'

# Unit tests for BudgeaClient::UsersManagementApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'UsersManagementApi' do
  before do
    # run before each test
    @instance = BudgeaClient::UsersManagementApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of UsersManagementApi' do
    it 'should create an instance of UsersManagementApi' do
      expect(@instance).to be_instance_of(BudgeaClient::UsersManagementApi)
    end
  end

  # unit tests for hash_delete
  # Delete the user&#39;s connections
  # deletes all connections of the user given his hash&lt;br&gt;&lt;br&gt;
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'hash_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_get
  # Get users
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :search searches a user by mail (if it contains no &#39;@&#39;, &#39;@biapi.pro&#39; will be added at the end)
  # @option opts [String] :expand 
  # @return [InlineResponse20021]
  describe 'users_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_config_delete
  # Delete the given user configurations. deletions on keys prefixed by &#39;biapi.&#39; (except callback_url) are ignored
  # - keys (string): list of coma separated keys to be deleted.&lt;br&gt;&lt;br&gt;
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'users_id_user_config_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_config_get
  # Get configuration of a user.
  # &lt;br&gt;&lt;br&gt;
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'users_id_user_config_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_config_post
  # Change configuration of a user. modifications on keys prefixed by &#39;biapi.&#39; (except callback_url) are ignored
  # 
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'users_id_user_config_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_delete
  # Delete the user
  # This endpoint deletes the user.&lt;br&gt;&lt;br&gt;
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [User]
  describe 'users_id_user_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_get
  # Get a user
  # 
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [User]
  describe 'users_id_user_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_profiles_get
  # Get profiles
  # 
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [InlineResponse20037]
  describe 'users_id_user_profiles_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_profiles_id_profile_get
  # Get a profile
  # 
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_profile 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [Profile]
  describe 'users_id_user_profiles_id_profile_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_profiles_main_get
  # Get the main profile
  # 
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [Profile]
  describe 'users_id_user_profiles_main_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_profiles_me_get
  # Get my profile
  # 
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [Profile]
  describe 'users_id_user_profiles_me_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_token_post
  # Create a token
  # Create an access_token for this user and get it.&lt;br&gt;&lt;br&gt;
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param application application name
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'users_id_user_token_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
