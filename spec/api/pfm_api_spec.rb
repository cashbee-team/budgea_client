=begin
#Budgea API Documentation

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 2.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.14

=end

require 'spec_helper'
require 'json'

# Unit tests for BudgeaClient::PFMApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'PFMApi' do
  before do
    # run before each test
    @instance = BudgeaClient::PFMApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of PFMApi' do
    it 'should create an instance of PFMApi' do
      expect(@instance).to be_instance_of(BudgeaClient::PFMApi)
    end
  end

  # unit tests for auth_confirm_new_email_post
  # Confirm new email address
  # 
  # @param token token received by email
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'auth_confirm_new_email_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for auth_confirm_post
  # Confirm email address
  # &lt;br&gt;&lt;br&gt;
  # @param token token received in email
  # @param application application in use
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse2001]
  describe 'auth_confirm_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for auth_cookie_post
  # Login with credentials and set as cookie
  # 
  # @param username username
  # @param password password
  # @param application application name
  # @param [Hash] opts the optional parameters
  # @option opts [String] :scope scope requested for the token
  # @return [nil]
  describe 'auth_cookie_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for auth_register_post
  # Register to API
  # Create a new user with his email address and password.&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;
  # @param email email address
  # @param password password
  # @param application application in use
  # @param [Hash] opts the optional parameters
  # @option opts [String] :sponsor sponsor code to get advantages
  # @option opts [String] :notification_token APNS or GCM token to send notifications to device
  # @return [InlineResponse2004]
  describe 'auth_register_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for auth_resend_confirm_email_post
  # Resend an email to confirm email address.
  # Sent token can be re-generated as it might be expired. Note that requesting email confirmation on already confirmed profile will raise a BadRequest.&lt;br&gt;&lt;br&gt;
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'auth_resend_confirm_email_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for auth_token_delete
  # Remove user access
  # This endpoint removes the token in use.&lt;br&gt;&lt;br&gt;
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'auth_token_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for auth_token_post
  # Login to API with credentials
  # Request a new user token by giving an username and a password.&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;
  # @param username username
  # @param password password
  # @param application application name
  # @param [Hash] opts the optional parameters
  # @option opts [String] :scope scope requested for the token
  # @return [InlineResponse2005]
  describe 'auth_token_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for hash_delete
  # Delete the user&#39;s connections
  # deletes all connections of the user given his hash&lt;br&gt;&lt;br&gt;
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'hash_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_accounts_id_account_balances_get
  # Get balances of accounts
  # Get balance (income/outcome/balance) of enabled accounts for the given period.&lt;br&gt;&lt;br&gt;By default, min_date and max_date are the current month, and period is a single month.&lt;br&gt;&lt;br&gt;The period is composed with units (days, months, years) and numbers. You can give for example \&quot;1month\&quot;, \&quot;15days\&quot;, \&quot;1year6months\&quot;, etc.&lt;br&gt;&lt;br&gt;
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_account 
  # @param [Hash] opts the optional parameters
  # @option opts [Date] :min_date minimal (inclusive) date
  # @option opts [Date] :max_date maximal (inclusive) date
  # @option opts [String] :period split output with the given period (default: month)
  # @return [nil]
  describe 'users_id_user_accounts_id_account_balances_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_accounts_id_account_operationsalert_get
  # Get a list of configurated alerts
  # &lt;br&gt;&lt;br&gt;
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_account 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [InlineResponse20028]
  describe 'users_id_user_accounts_id_account_operationsalert_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_accounts_id_account_operationsalert_id_operationsalert_delete
  # Delete an alert on transactions or investemens
  # &lt;br&gt;&lt;br&gt;
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_account 
  # @param id_operationsalert 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [UserAlert]
  describe 'users_id_user_accounts_id_account_operationsalert_id_operationsalert_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_accounts_id_account_operationsalert_id_operationsalert_put
  # Edit an alert on transactions or investemens
  # 
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_account 
  # @param id_operationsalert 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :type parameter to choose the scope of the alert. accepted: transactions, investements
  # @option opts [Integer] :income_max capital gain thresholds
  # @option opts [Integer] :expense_max capital loss thresholds
  # @option opts [String] :value_type whether the threshold is given in absolut value or percent. accepted: percent, flat
  # @option opts [Integer] :date_range (number of days) range on which the analysis has to be done
  # @option opts [String] :expand 
  # @return [UserAlert]
  describe 'users_id_user_accounts_id_account_operationsalert_id_operationsalert_put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_accounts_id_account_operationsalert_post
  # Create an alert on transactions or investemens of a given user
  # 
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_account 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :type parameter to choose the scope of the alert. accepted: transactions, investements
  # @option opts [Integer] :income_max capital gain thresholds
  # @option opts [Integer] :expense_max capital loss thresholds
  # @option opts [String] :value_type whether the threshold is given in absolut value or percent. accepted: percent, flat
  # @option opts [Integer] :date_range (number of days) range on which the analysis has to be done
  # @option opts [String] :expand 
  # @return [UserAlert]
  describe 'users_id_user_accounts_id_account_operationsalert_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_accountsalert_get
  # Get alert configuration of a specific account
  # &lt;br&gt;&lt;br&gt;
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'users_id_user_accountsalert_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_accountsalert_put
  # Update alert configuration of an account
  # It updates the alert configuration of a specific account&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :expense_max threshold from which an alert has to be sent for a high expense
  # @option opts [Integer] :accounts list of accounts (id coma separated) on wich the alert has to be applied. If &#39;all&#39; is given, it is applied on all accounts. default: all
  # @option opts [Integer] :income_max threshold from which an alert has to be sent for a high income
  # @option opts [Integer] :balance_min2 second threshold from which an alert has to be sent for a low balance
  # @option opts [BOOLEAN] :enabled if false, the alert is not taken into account
  # @return [Object]
  describe 'users_id_user_accountsalert_put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_balances_get
  # Get balances of accounts
  # Get balance (income/outcome/balance) of enabled accounts for the given period.&lt;br&gt;&lt;br&gt;By default, min_date and max_date are the current month, and period is a single month.&lt;br&gt;&lt;br&gt;The period is composed with units (days, months, years) and numbers. You can give for example \&quot;1month\&quot;, \&quot;15days\&quot;, \&quot;1year6months\&quot;, etc.&lt;br&gt;&lt;br&gt;
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param [Hash] opts the optional parameters
  # @option opts [Date] :min_date minimal (inclusive) date
  # @option opts [Date] :max_date maximal (inclusive) date
  # @option opts [String] :period split output with the given period (default: month)
  # @return [nil]
  describe 'users_id_user_balances_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_connections_id_connection_accounts_id_account_balances_get
  # Get balances of accounts
  # Get balance (income/outcome/balance) of enabled accounts for the given period.&lt;br&gt;&lt;br&gt;By default, min_date and max_date are the current month, and period is a single month.&lt;br&gt;&lt;br&gt;The period is composed with units (days, months, years) and numbers. You can give for example \&quot;1month\&quot;, \&quot;15days\&quot;, \&quot;1year6months\&quot;, etc.&lt;br&gt;&lt;br&gt;
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_connection 
  # @param id_account 
  # @param [Hash] opts the optional parameters
  # @option opts [Date] :min_date minimal (inclusive) date
  # @option opts [Date] :max_date maximal (inclusive) date
  # @option opts [String] :period split output with the given period (default: month)
  # @return [nil]
  describe 'users_id_user_connections_id_connection_accounts_id_account_balances_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_connections_id_connection_accounts_id_account_operationsalert_get
  # Get a list of configurated alerts
  # &lt;br&gt;&lt;br&gt;
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_connection 
  # @param id_account 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [InlineResponse20028]
  describe 'users_id_user_connections_id_connection_accounts_id_account_operationsalert_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_connections_id_connection_accounts_id_account_operationsalert_id_operationsalert_delete
  # Delete an alert on transactions or investments
  # &lt;br&gt;&lt;br&gt;
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_connection 
  # @param id_account 
  # @param id_operationsalert 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [UserAlert]
  describe 'users_id_user_connections_id_connection_accounts_id_account_operationsalert_id_operationsalert_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_connections_id_connection_accounts_id_account_operationsalert_id_operationsalert_put
  # Edit an alert on transactions or investments
  # 
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_connection 
  # @param id_account 
  # @param id_operationsalert 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :type parameter to choose the scope of the alert. accepted: transactions, investments
  # @option opts [Integer] :income_max capital gain thresholds
  # @option opts [Integer] :expense_max capital loss thresholds
  # @option opts [String] :value_type whether the threshold is given in absolut value or percent. accepted: percent, flat
  # @option opts [Integer] :date_range (number of days) range on which the analysis has to be done
  # @option opts [String] :expand 
  # @return [UserAlert]
  describe 'users_id_user_connections_id_connection_accounts_id_account_operationsalert_id_operationsalert_put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_connections_id_connection_accounts_id_account_operationsalert_post
  # Create an alert on transactions or investments of a given user
  # 
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_connection 
  # @param id_account 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :type parameter to choose the scope of the alert. accepted: transactions, investements
  # @option opts [Integer] :income_max capital gain thresholds
  # @option opts [Integer] :expense_max capital loss thresholds
  # @option opts [String] :value_type whether the threshold is given in absolut value or percent. accepted: percent, flat
  # @option opts [Integer] :date_range (number of days) range on which the analysis has to be done
  # @option opts [String] :expand 
  # @return [UserAlert]
  describe 'users_id_user_connections_id_connection_accounts_id_account_operationsalert_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_connections_id_connection_balances_get
  # Get balances of accounts
  # Get balance (income/outcome/balance) of enabled accounts for the given period.&lt;br&gt;&lt;br&gt;By default, min_date and max_date are the current month, and period is a single month.&lt;br&gt;&lt;br&gt;The period is composed with units (days, months, years) and numbers. You can give for example \&quot;1month\&quot;, \&quot;15days\&quot;, \&quot;1year6months\&quot;, etc.&lt;br&gt;&lt;br&gt;
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_connection 
  # @param [Hash] opts the optional parameters
  # @option opts [Date] :min_date minimal (inclusive) date
  # @option opts [Date] :max_date maximal (inclusive) date
  # @option opts [String] :period split output with the given period (default: month)
  # @return [nil]
  describe 'users_id_user_connections_id_connection_balances_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_devices_get
  # Get devices
  # 
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [InlineResponse20038]
  describe 'users_id_user_devices_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_devices_id_device_delete
  # Delete device.
  # 
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_device 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [Device]
  describe 'users_id_user_devices_id_device_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_devices_id_device_get
  # Get a device
  # 
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_device 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [Device]
  describe 'users_id_user_devices_id_device_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_devices_id_device_put
  # Update attributes of the device.
  # 
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_device 
  # @param notification_token the GCM or APNS notification_token to use
  # @param application the device in use
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :notification_version version of notifications
  # @option opts [String] :expand 
  # @return [Device]
  describe 'users_id_user_devices_id_device_put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_devices_post
  # Create a device linked to specified token.
  # 
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param notification_token the GCM or APNS notification_token to use
  # @param application the device in use
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :notification_version version of notifications
  # @option opts [String] :expand 
  # @return [Device]
  describe 'users_id_user_devices_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_forecast_get
  # Get forecast
  # 
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'users_id_user_forecast_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_get
  # Get a user
  # 
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [User]
  describe 'users_id_user_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_operationsalert_get
  # Get a list of configurated alerts
  # &lt;br&gt;&lt;br&gt;
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [InlineResponse20028]
  describe 'users_id_user_operationsalert_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_operationsalert_id_operationsalert_delete
  # Delete an alert on transactions or investemens
  # &lt;br&gt;&lt;br&gt;
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_operationsalert 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [UserAlert]
  describe 'users_id_user_operationsalert_id_operationsalert_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_operationsalert_id_operationsalert_put
  # Edit an alert on transactions or investemens
  # 
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_operationsalert 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :type parameter to choose the scope of the alert. accepted: transactions, investements
  # @option opts [Integer] :income_max capital gain thresholds
  # @option opts [Integer] :expense_max capital loss thresholds
  # @option opts [String] :value_type whether the threshold is given in absolut value or percent. accepted: percent, flat
  # @option opts [Integer] :date_range (number of days) range on which the analysis has to be done
  # @option opts [String] :expand 
  # @return [UserAlert]
  describe 'users_id_user_operationsalert_id_operationsalert_put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_operationsalert_post
  # Create an alert on transactions or investemens of a given user
  # 
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :type parameter to choose the scope of the alert. accepted: transactions, investements
  # @option opts [Integer] :income_max capital gain thresholds
  # @option opts [Integer] :expense_max capital loss thresholds
  # @option opts [String] :value_type whether the threshold is given in absolut value or percent. accepted: percent, flat
  # @option opts [Integer] :date_range (number of days) range on which the analysis has to be done
  # @option opts [String] :expand 
  # @return [UserAlert]
  describe 'users_id_user_operationsalert_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_profiles_get
  # Get profiles
  # 
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [InlineResponse20039]
  describe 'users_id_user_profiles_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_profiles_id_profile_get
  # Get a profile
  # 
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param id_profile 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [Profile]
  describe 'users_id_user_profiles_id_profile_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_profiles_main_get
  # Get the main profile
  # 
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [Profile]
  describe 'users_id_user_profiles_main_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_profiles_me_get
  # Get my profile
  # 
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :expand 
  # @return [Profile]
  describe 'users_id_user_profiles_me_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_profiles_me_put
  # Change settings of the profile.
  # 
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :email change email of profile
  # @option opts [String] :password change password of profile
  # @option opts [String] :current_password needed when changing the password or the email
  # @option opts [String] :contact change contact information of a profile
  # @option opts [String] :conf change config of a profile
  # @option opts [BOOLEAN] :state state of the profile
  # @option opts [String] :lang change lang of the profile
  # @option opts [String] :expand 
  # @return [Profile]
  describe 'users_id_user_profiles_me_put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_resume_get
  # Get synthesis configuration of a specific user
  # &lt;br&gt;&lt;br&gt;
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'users_id_user_resume_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_user_resume_post
  # Update synthesis configuration
  # &lt;br&gt;&lt;br&gt;
  # @param id_user Hint: you can use &#39;me&#39; or &#39;all&#39;
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :resume_enabled whether the synthesis is activated or not
  # @option opts [Integer] :resume_frequency frequency of the synthesis given in days
  # @return [Object]
  describe 'users_id_user_resume_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
